class(x)
x      = (1:100)
y      = a+b*x + eps
x<-as.matrix(x)
y<-as.matrix(y)
comb<-cbind(x,y)
actual
class(x)
pred.y<-predict(comb, newdata = validation[,-1],interval='prediction',level=0.95)
class(x)
class(y)
comb<-cbind(x,y)
x      = (1:100)
y      = a+b*x + eps
x
y
comb<-cbind(x,y)
comb
pred.y<-predict(comb, newdata = validation[,-1],interval='prediction',level=0.95)
class(x)
pred.y<-coef(mod)[1] + 1*coef(mod)[2]
pred.y
pred.y<-coef(mod)[1] + 1*coef(mod)[2]
pred.y<-coef(mod)[1] + x*coef(mod)[2]
pred.y
eps
resamples_eps
resamples_eps <- lapply(1:500, function(i) sample(eps, replace = T))
resamples_eps
dat2<-as.data.frame(matrix(, nrow=500))
dat2
dat2<-as.data.frame(matrix(, nrow=500,ncol=2))
for (i in 1:500){
dat2[i,1]<-pred.y+resample[[i]]
dat2[i,2]<-lm(dat2$V1~x)$coefficient[2]
}
dat2
dat2<-as.data.frame(matrix(, nrow=500,ncol=2))
for (i in 1:500){
dat2[i,1]<-pred.y+resamples_eps[[i]]
dat2[i,2]<-lm(dat2$V1~x)$coefficient[2]
}
dat2<-as.data.frame(matrix(, nrow=500,ncol=1))
for (i in 1:500){
ys<-pred.y+resamples_eps[[i]]
dat2[i,1]<-lm(dat2$V1~x)$coefficient[2]
}
dat2<-as.data.frame(matrix(, nrow=500,ncol=1))
for (i in 1:500){
ys<-pred.y+resamples_eps[[i]]
dat2[i,1]<-lm(ys~x)$coefficient[2]
}
dat2
mean_boot<-mean(dat2$V1)
actual<-mod$coefficients[2]
mean_boot
actual
install.packages("RcppArmadillo")
library("RcppArmadillo")
library(dplyr)
install.packages("nycflights13")
data(flights)
library(nycflights13)
data(flights)
head(flights)
justMay<-filter(flights, month==5)
head(justMay)
class(justMay)
arrange(flights, day)
arrange(flights, desc(day))
select(flights, year)
select(flights, year:day)
summarise(flights, delay=mean(dep_delay, na.rm=TRUE))
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay=mean(dep_delay, na.rm=TRUE))
by_day
summarise(by_day, delay=mean(dep_delay, na.rm=TRUE))
n(1)
n(by_day)
require(devtools)
install_github("mattblackwell/DirectEffects", ref = "master")
datatransform<-function(HIT){
vec<-rep(1:2, 1500)
HIT<-cbind(HIT,vec)
HIT<-as.data.frame((HIT))
colnames(HIT)<-c("comparison_id" ,"document_id", "result","num")
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==2){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==1){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT2<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
metaHIT<-rbind(newHIT,newHIT2)
return(metaHIT)
}
HIT2<-datatransform(HIT)
HIT<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/exampleHITs.csv", header=T)
HIT
HIT2<-datatransform(HIT)
datat<-function(docid,dataset){
list1<-list()
for (i in docid){
subset<-dataset[dataset$DocIDi %in% i,]
list1<-subset
}
}
DocId
HIT2
DocId<-c(5092,5099)
datatrans(DocId,HIT2)
DocId<-c(5092,5099)
datat(DocId,HIT2)
A<-datat(DocId,HIT2)
A
datat<-function(docid,dataset){
list1<-list()
for (i in docid){
subset<-dataset[dataset$DocIDi %in% i,]
list1<-subset
}
}
A<-datat(DocId,HIT2)
A
datat<-function(docid,dataset){
list<-list()
list1<-list()
for (i in docid){
list1<-dataset[dataset$DocIDi %in% i,]
list<-c(list,list1)
}
}
A<-datat(DocId,HIT2)
A
for (i in DocId){
list1<-dataset[dataset$DocIDi %in% i,]
list<-c(list,list1)
}
for (i in DocId){
list1<-HIT2[HIT2$DocIDi %in% i,]
list<-c(list,list1)
}
list
datat<-function(docid,HIT2){
list<-list()
list1<-list()
for (i in DocId){
list1<-HIT2[HIT2$DocIDi %in% i,]
list<-c(list,list1)
}
}
A<-datat(DocId,HIT2)
A
datat<-function(docid,HIT2){
list<-list(NULL)
list1<-list()
for (i in DocId){
list1<-HIT2[HIT2$DocIDi %in% i,]
list<-c(list,list1)
}
}
A<-datat(DocId,HIT2)
A
datat<-function(docid,HIT2){
list<-list()
for (i in DocId){
a<-HIT2[HIT2$DocIDi %in% i,]
list<-c(list,a)
}
}
A<-datat(DocId,HIT2)
A
for (i in DocId){
a<-HIT2[HIT2$DocIDi %in% i,]
list<-c(list,a)
}
list
list1<-list()
list1
datat<-function(docid,HIT2){
l<-NULL
list1<-list()
for (i in DocId){
a<-HIT2[HIT2$DocIDi %in% i,]
list1<-c(list1,a)
}
}
A<-datat(DocId,HIT2)
A
datat<-function(docid,HIT2){
l<-NULL
list1<-list(l)
for (i in DocId){
a<-HIT2[HIT2$DocIDi %in% i,]
list1<-c(list1,a)
}
}
A<-datat(DocId,HIT2)
A
datat<-function(docid,HIT2){
l<-NULL
list1<-as.list(l)
for (i in DocId){
a<-HIT2[HIT2$DocIDi %in% i,]
list1<-c(list1,a)
}
}
A<-datat(DocId,HIT2)
A
datat<-function(docid,d){
l<-NULL
list1<-as.list(l)
for (i in docid){
a<-HIT2[HIT2$DocIDi %in% i,]
list1<-c(list1,a)
}
}
A<-datat(DocId,HIT2)
A
datat<-function(docid,d){
l<-NULL
list1<-as.list(l)
for (i in docid){
a<-d[d$DocIDi %in% i,]
list1<-c(list1,a)
}
}
A<-datat(DocId,HIT2)
A
datat<-function(docid,d){
#l<-NULL
list1<-list()
for (i in docid){
a<-d[d$DocIDi %in% i,]
list1<-c(list1,a)
return(list1)
}
}
A<-datat(DocId,HIT2)
A
A$DocIDi[1]
t(A)
t(A[1])
t(A[2])
list2<-list(A$DocIDi,A$DocIDj,A$Choose)
list2
list2<-list(t(A$DocIDi),t(A$DocIDj),t(A$Choose))
list2
HIT<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/exampleHITs.csv", header=T)
HIT2<-datatransform(HIT)
datatransform<-function(HIT){
vec<-rep(1:2, 1500)
HIT<-cbind(HIT,vec)
HIT<-as.data.frame((HIT))
colnames(HIT)<-c("comparison_id" ,"document_id", "result","num")
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==2){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==1){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT2<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
metaHIT<-rbind(newHIT,newHIT2)
return(metaHIT)
}
HIT2<-datatransform(HIT)
HIT2
datatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
subsetdata2<-lambda[lambda$DocId %in% i,]
#for(i in 1:length(docid)){
lambdalist[[i]]<-subsetdata2
#}
}
return(lambdalist)
}
datatrans(4991,HIT2)
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = c(1-prob, prob))#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
lambda
lambda
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
subsetdata2<-lambda[lambda$DocId %in% i,]
#for(i in 1:length(docid)){
lambdalist[[i]]<-subsetdata2
#}
}
return(lambdalist)
}
DocId
datatrans(DocId,lambda)
class(lambda)
datatrans<-function(docid,dataset){
outputlist<-NULL
outputlist<-as.list(outputlist)
for (i in docid){
subsetdata1<-dataset[dataset$DocIDi %in% i,]
#for(i in 1:length(docid)){
outputlist[[i]]<-subsetdata1
#}
}
return(outputlist)
}
test1<-datatrans(DocId,HIT2)
test1
HIT2
datatrans(DocId,lambda)
atatrans(DocId,HIT2)
datatrans(DocId,HIT2)
DocId
datatrans(10,HIT2)
datatrans(4990,HIT2)
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/bradleyterry/R")
library(Rcpp)
HIT<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/exampleHITs.csv", header=T)
HIT<-dat[,3:5]
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/exampleHITs.csv", header=T)
HIT<-dat[,3:5]
dat
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/exampleHITs.csv", header=T)
dat
HIT<-dat[,3:5]
dat
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header=T)
HIT<-dat[,3:5]
HIT
HIT<-dat[,3:5]
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header=T)
HIT<-dat[,3:5]
HIT
datatrans<-function(docid,dataset){
outputlist<-NULL
outputlist<-as.list(outputlist)
for (i in docid){
outputlist[[i]]<-dataset[dataset$DocIDi %in% i,]
}
return(outputlist)
}
test1<-datatrans(DocId,HIT2)
test1[[5000]]
docid
datatransform<-function(HIT){
vec<-rep(1:2, 1500)
HIT<-cbind(HIT,vec)
HIT<-as.data.frame((HIT))
colnames(HIT)<-c("comparison_id" ,"document_id", "result","num")
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==2){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==1){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT2<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
metaHIT<-rbind(newHIT,newHIT2)
return(metaHIT)
}
HIT2<-datatransform(HIT)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = c(1-prob, prob))#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
#==============================================================================
#Pre-format data prior to rcpp coding
#==============================================================================
head(HIT2)
datatrans<-function(docid,dataset){
outputlist<-NULL
outputlist<-as.list(outputlist)
for (i in docid){
outputlist[[i]]<-dataset[dataset$DocIDi %in% i,]
}
return(outputlist)
}
test1<-datatrans(DocId,HIT2)
test1[[5000]]
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
browser()
}
return(lambdalist)
}
head(lambda)
test2<-lambdatrans(DocId,lambda)
sourceCpp("rcpp_brad")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/")
library(Rcpp)
sourceCpp("rcpp_brad")
sourceCpp("rcpp_brad.cpp")
DataFrame subsetdata = dataset;
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/")
library(Rcpp)
sourceCpp("rcpp_brad.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/")
library(Rcpp)
sourceCpp("rcpp_brad.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/")
library(Rcpp)
sourceCpp("rcpp_brad.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/")
library(Rcpp)
sourceCpp("rcpp_brad.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/")
library(Rcpp)
sourceCpp("rcpp_brad.cpp")
