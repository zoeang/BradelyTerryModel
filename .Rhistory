library(EBMAforecast)
presidentialForecast
library(EBMAforecast)
presidentialForecast
library(EBMAforecast)
library("shiny")
presidential
presidentialForecast
presidentialForecast
data(presidentialForecast )
print(presidentialForecast)
plot(presidentialForecast$Actual)
plot(lm(presidentialForecast$Actual~seq(1952, 2008,4))
lm(presidentialForecast$Actual~seq(1952, 2008,4))
}
seq(1952, 2008,4)
plot(presidentialForecast, main="Predicted Presidential Forecast", xlim=seq(1952, 2008,4))
plot(presidentialForecast, main="Predicted Presidential Forecast", xlab="Year")
dev.off()
plot(presidentialForecast, main="Predicted Presidential Forecast", xlab="Year")
plot(presidentialForecast, main="Predicted Presidential Forecast")
plot(presidentialForecast$Actual, main="Predicted Presidential Forecast", xlab="Year")
axis(1,labels = as.character(seq(1952, 2008, 4)))
axis(1,at=x, labels = as.character(seq(1952, 2008, 4)))
axis(1,at= 0:16, labels = as.character(seq(1952, 2008, 4)))
length(seq(1952, 2008, 4))
axis(1,at= seq(1,15,1), labels = as.character(seq(1952, 2008, 4)))
print(presidentialForecast)
dev.off()
plot(presidentialForecast$Actual, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
dev.off()
plot(presidentialForecast$Actual, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction",
axis(1,at= seq(1,15,1), labels = as.character(seq(1952, 2008, 4))))
library(rstan)
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel")
load("fitExperiment2.7")
summary(fitExperiment2.7)$summary[paste0('a[',1:50,']'),'mean']
summary(fitExperiment2.7)$summary
summary(fitExperiment2.7)
library(Rcpp)
library(Rcpp)
cppFunction('DataFrame bradleyterry(int a; int b, vec id; DataFrame lambda; DataFrame dataset ){
DataFrame subsetdata<-dataset[dataset$DocIDi %in% id,];
DataFrame newlambda<-lambda[lambda$DocId %in% id,];
NumericVector sumvec=;
NumericVector lambdavec=;
for(int i=0; i<subsetdata.nrow(); i++){
DataFrame lambdajsubset= lambda[lambda['DocId'] %in% subsetdata['DocIDj'][i],];
NumericVector lambdavec= c(lambdavec,lambdajsubset['Lambda']);
};
for (int i=0; i<nrow(subsetdata); i++){
double sumunit = (1/(newlambda['Lambda']+lambdavec[i]));
NumericVector sumvec = as.vector(c(sumvec,sumunit)) ;
}
NumericVector summationterm = sum(sumvec) ;
DataFrame output = (a-1+sum(subsetdata['Choose'])/(b+summationterm);
return(output)
}')
library(EBMAforecast)
data(presidentialForecast )
print(presidentialForecast)
dev.off()
plot(presidentialForecast$Actual, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
dev.off()
plot(presidentialForecast$Actual, lty=l, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
pdf("ForClass.pdf", width=7, height=7,  bg="thistle")
plot(xaxis, econ.inds, type="o", lwd=2, pch=5, ylim=c(0, 6.5), axes=F, xlab="", ylab=" Average Perception of Economy")
data(VADeaths)
VADeaths # look at the data
webData<-url("http://pages.wustl.edu/montgomery/incumbents2.txt")
OOS <- read.table(webData)
attach(OOS)
VoteShare<-t(matrix(by(voteshare, list(year, chalquality), mean, na.rm=TRUE)
, ncol=2))
VoteShare # Vote share by year and challenger quality
rownames(VoteShare)<-c("Inexperienced", "Experienced")
colnames(VoteShare)<-unique(year)
barplot(VoteShare, beside=T, legend=T, ylim=c(0,.90))
xaxis<-c(1:12) # think of this as time periods
econ.inds<-c(2,3,3.5, 2, 3, 2.5, 3, 2.5, 3, 3.5,4,4)
econ.reps <- econ.inds + 2
econ.dems <- econ.inds - 1
plot(xaxis, econ.inds, type="l") # lines
plot(xaxis, econ.inds) # this is your standard default plot.  The default is type="p"
dev.off()
plot(xaxis, econ.inds) # this is your standard default plot.  The default is type="p"
plot(xaxis, econ.inds, type="l") # lines
dev.off()
plot(presidentialForecast$Actual, type="l", main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
axis(1,at= seq(1,15,1), labels = as.character(seq(1952, 2008, 4)))
dev.off()
plot(NULL, xlim=c(1, 12), ylim=c(2,4))
points(xaxis, econ.inds, type="b")
plot(NULL, xlim=c(1, 12), ylim=c(2,4))
points(xaxis, econ.inds, type="l")
plot(NULL, xlim=c(1, 12), ylim=c(2,4))
plot(xaxis, econ.inds, type="o", lwd=2, pch=5, ylim=c(0, 6.5), axes=F, xlab="", ylab=" Average Perception of Economy")
points(xaxis, econ.dems, type="o", lwd=2, pch="D", col="blue")
points(xaxis, econ.reps, type="o", lwd=2, pch="R", col="red", ylim=c(0, 6.5))
axis(side=1, at = c(2,4, 6, 8, 10, 12), labels=c("Feb", "Apr", "June", "Aug", "Oct", "Dec"))
axis(side=2)
plot(xaxis, econ.inds, type="o", lwd=2, pch=5, ylim=c(0, 6.5), axes=F, xlab="", ylab=" Average Perception of Economy")
dev.off()
plot(presidentialForecast$Actual, type="l", axes=F, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
axis(1,at= seq(1,15,1), labels = as.character(seq(1952, 2008, 4)))
axis(side=1, at = c(2,4, 6, 8, 10, 12), labels=c("Feb", "Apr", "June", "Aug", "Oct", "Dec"))
plot(xaxis, econ.inds, type="o", lwd=2, pch=5, ylim=c(0, 6.5), axes=F, xlab="", ylab=" Average Perception of Economy")
points(xaxis, econ.dems, type="o", lwd=2, pch="D", col="blue")
points(xaxis, econ.reps, type="o", lwd=2, pch="R", col="red", ylim=c(0, 6.5))
axis(side=1, at = c(2,4, 6, 8, 10, 12), labels=c("Feb", "Apr", "June", "Aug", "Oct", "Dec"))
axis(side=2)
dev.off()
plot(presidentialForecast$Actual, type="l", axes=F, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
axis(1,at= seq(1,15,1), labels = as.character(seq(1952, 2008, 4)))
axis(side=2)
axis(side=2, las=2)
dev.off()
plot(presidentialForecast$Actual, type="l", axes=F, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
axis(1,at= seq(1,15,1), labels = as.character(seq(1952, 2008, 4)))
axis(side=2, las=2)
points(xaxis, #col, type="l")
data(presidentialForecast )
dev.off()
print(presidentialForecast)
dev.off()
plot(presidentialForecast$Actual, type="l", axes=F, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
axis(1,at= seq(1,15,1), labels = as.character(seq(1952, 2008, 4)))
axis(side=2, las=2)
points(presidentialForecast$Campbell, type="l")
dev.off()
plot(presidentialForecast$Actual, type="l", axes=F, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
axis(1,at= seq(1,15,1), labels = as.character(seq(1952, 2008, 4)))
axis(side=2, las=2)
points(presidentialForecast$Campbell, type="l", col="red")
dev.off()
plot(presidentialForecast$Actual, type="l", axes=F, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
axis(1,at= seq(1,15,1), labels = as.character(seq(1980, 2008, 4))) #user defined argument
axis(side=2, las=2)
points(presidentialForecast$Campbell, type="l", col="red")
axis(1,at= seq(1,15,1), labels = as.character(seq(1980, 2008, 4))) #user defined argument
library("shiny")
runExample("02_text") # tables and data frames
dev.off()
plot(presidentialForecast$Actual, type="l", axes=F, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
axis(1,at= seq(1,15,1), labels = as.character(seq(1952, 2008, 4))) #user defined argument
axis(side=2, las=2)
points(presidentialForecast$Campbell, type="l", col="red")
runExample("02_text") # tables and data frames
runExample("05_sliders") # slider bars
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
presidentialForecast
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
dim(presidentialForecast)
presidentialForecast
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
dataset<-data(cbind(seq(1952, 2008,4),presidentialForecast))
dataset<-data(presidentialForecast)
data(presidentialForecast)
dataset<-cbind(seq(1952, 2008,4), presidentialForecast)
dataset
colnames(dataset)[1]<-"Year"
dataset
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runExample("05_sliders") # slider bars
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runExample("05_sliders") # slider bars
runExample("02_text") # tables and data frames
runExample("04_mpg") # global variables
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runExample("06_tabsets") # tabbed panels
runExample("05_sliders") # slider bars
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
input$range[1]-1951
seq(2000, 2008, 4)
seq(1952-1951,2008-1951,1)
length(seq(1952-1951,2008-1951,4))
seq(1952-1951,2008-1951,4)
(seq(1952-1951,2008-1951,4)+3)/4
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runExample("03_reactivity") # a reactive expression
runExample("07_widgets") # help text and submit buttons
runExample("09_upload") # file upload wizard
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
(input$range[2]-input$range[1]/4)+1
dataset
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
dev.off()
plot(presidentialForecast$Actual, type="l", axes=F, main="Predicted Democratic Vote Share", xlab="Year", ylab=
"Prediction")
axis(1,at= seq(1,15,1), labels = as.character(seq(1952, 2008, 4))) #user defined argument
axis(side=2, las=2)
points(presidentialForecast$Campbell, type="l", col="red")
points(presidentialForecast$Fair, type="l", col="red")
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
runApp('~/Spring2018/R/Lecture 14 Shiny/Example.R')
