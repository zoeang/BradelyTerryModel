lower <- curve(0 +.14*x - .015*x^2, 11,22, add=T, lty=2, col="red")
polygon(c(upper$x, lower$x[length(lower$x):1]), c(upper$y, lower$y[length(lower$y):1]), col=rgb(1,0,0,alpha=.1), border=F)
plot(dat$lnpop[as.numeric(names(lm1.fix$residuals))],lm1.fix$residuals, pch=16, xlab="Log Population", ylab="Residuals",main="Population vs Residuals, Altered Model", cex=.75)
y.loess <- loess(lm1.fix$residuals ~ dat$lnpop[as.numeric(names(lm1.fix$residuals))])
freq <- hist(dat$multish, main="Multilataral Aid Flows", xlab="Multilateral Aid Flows", col="red", breaks=100, plot=F)
plot(freq,main="Original", xlab="Multilateral Aid Flows", col="red", breaks=100)
hist(dat$transform, main="Transformed", xlab="Multilateral Aid Flows", col="red", breaks=100)
par(mfrow=c(2,2))
freq <- hist(dat$multish, main="Multilataral Aid Flows", xlab="Multilateral Aid Flows", col="red", breaks=100, plot=F)
plot(freq,main="Original", xlab="Multilateral Aid Flows", col="red", breaks=100)
hist(dat$transform, main="Transformed", xlab="Multilateral Aid Flows", col="red", breaks=100)
par(mfrow=c(1,2))
freq <- hist(dat$multish, main="Multilataral Aid Flows", xlab="Multilateral Aid Flows", col="red", breaks=100, plot=F)
plot(freq,main="Original", xlab="Multilateral Aid Flows", col="red", breaks=100)
hist(dat$transform, main="Transformed", xlab="Multilateral Aid Flows", col="red", breaks=100)
plot(lm1$fitted,lm1$residuals, pch=16, xlab="Fitted Values", ylab="Residuals", main="Fitted vs Residuals, Author's Model", ylim=c(-5,11), cex=.75)
upper <- curve(1.5+.6*x + .2*x^2, -1,6, add=T, lty=2, col="red")
lower <- curve(-.4 -.9*x + .02*x^2, -1,6, add=T, lty=2, col="red")
polygon(c(upper$x, lower$x[length(lower$x):1]), c(upper$y, lower$y[length(lower$y):1]), col=rgb(1,0,0,alpha=.1), border=F)
plot(lm1.fix$fitted,lm1.fix$residuals, pch=16, xlab="Fitted Values", ylab="Residuals",main="Fitted vs Residuals, Altered Model")
plot(lm1,2, pch=16, main="Q-Q Plot, Author's Model", caption="")
plot(lm1.fix,2, pch=16,main="Q-Q Plot, Altered Model", caption="")
plot(lm1$fitted,lm1$residuals, pch=16, xlab="Fitted Values", ylab="Residuals", main="Fitted vs Residuals, Author's Model", ylim=c(-5,11), cex=.75)
upper <- curve(1.5+.6*x + .2*x^2, -1,6, add=T, lty=2, col="red")
lower <- curve(-.4 -.9*x + .02*x^2, -1,6, add=T, lty=2, col="red")
polygon(c(upper$x, lower$x[length(lower$x):1]), c(upper$y, lower$y[length(lower$y):1]), col=rgb(1,0,0,alpha=.1), border=F)
plot(lm1.fix$fitted,lm1.fix$residuals, pch=16, xlab="Fitted Values", ylab="Residuals",main="Fitted vs Residuals, Altered Model")
plot(lm1,2, pch=16, main="Q-Q Plot, Author's Model", caption="")
plot(lm1.fix,2, pch=16,main="Q-Q Plot, Altered Model", caption="")
plot(dat$lnpop,lm1$residuals, pch=16, xlab="Log Population", ylab="Residuals", main="Population vs Residuals, Author's Model", cex=.75, ylim=c(-5,11))
par(mfrow=c(2,2))
plot(lm1$fitted,lm1$residuals, pch=16, xlab="Fitted Values", ylab="Residuals", main="Fitted vs Residuals, Author's Model", ylim=c(-5,11), cex=.75)
plot(lm1.fix$fitted,lm1.fix$residuals, pch=16, xlab="Fitted Values", ylab="Residuals",main="Fitted vs Residuals, Altered Model")
plot(lm1,2, pch=16, main="Q-Q Plot, Author's Model", caption="")
plot(lm1.fix$fitted,lm1.fix$residuals, pch=16, xlab="Fitted Values", ylab="Residuals",main="Fitted vs Residuals, Altered Model")
par(mfrow=c(2,2))
plot(lm1$fitted,lm1$residuals, pch=16, xlab="Fitted Values", ylab="Residuals", main="Fitted vs Residuals, Author's Model", ylim=c(-5,11), cex=.75)
plot(lm1.fix$fitted,lm1.fix$residuals, pch=16, xlab="Fitted Values", ylab="Residuals",main="Fitted vs Residuals, Altered Model")
plot(lm1,2, pch=16, main="Q-Q Plot, Author's Model", caption="")
plot(lm1.fix,2, pch=16,main="Q-Q Plot, Altered Model", caption="")
par(mfrow=c(2,2))
plot(lm1$fitted,lm1$residuals, pch=16, xlab="Fitted Values", ylab="Residuals", main="Fitted vs Residuals, Author's Model", ylim=c(-5,11), cex=.75)
plot(lm1,2, pch=16, main="Q-Q Plot, Author's Model", caption="")
plot(lm1.fix$fitted,lm1.fix$residuals, pch=16, xlab="Fitted Values", ylab="Residuals",main="Fitted vs Residuals, Altered Model")
plot(lm1.fix,2, pch=16,main="Q-Q Plot, Altered Model", caption="")
plot(lm1,2, pch=16, main="Q-Q Plot, Author's Model", caption="")#Neumayer's Q-Q plot does not imply normality of errors (pg 172, FIg 6)
plot(lm1.fix,2, pch=16,main="Q-Q Plot, Altered Model", caption="")#King and Robetss Q-Q plot does imply normality of errors (pg 172, FIg 6)
plot(dat$lnpop,lm1$residuals, pch=16, xlab="Log Population", ylab="Residuals", main="Population vs Residuals, Author's Model", cex=.75, ylim=c(-5,11))
plot(dat$lnpop,lm1$residuals, pch=16, xlab="Log Population", ylab="Residuals", main="Population vs Residuals, Author's Model", cex=.75, ylim=c(-5,11))
plot(dat$lnpop,lm1$residuals, pch=16, xlab="Log Population", ylab="Residuals", main="Population vs Residuals, Author's Model", cex=.75, ylim=c(-5,11))
upper <- curve(-2.8+ -.14*x + .03*x^2, 11,22, add=T, lty=2, col="red") #upper envelope
lower <- curve(0 +.14*x - .015*x^2, 11,22, add=T, lty=2, col="red") #lower envelope
polygon(c(upper$x, lower$x[length(lower$x):1]), c(upper$y, lower$y[length(lower$y):1]), col=rgb(1,0,0,alpha=.1), border=F) #color in the envelope
plot(dat$lnpop[as.numeric(names(lm1.fix$residuals))],lm1.fix$residuals, pch=16, xlab="Log Population", ylab="Residuals",main="Population vs Residuals, Altered Model", cex=.75)
par(mfrow=c(2,2))
plot(dat$lnpop,lm1$residuals, pch=16, xlab="Log Population", ylab="Residuals", main="Population vs Residuals, Author's Model", cex=.75, ylim=c(-5,11))
plot(lm1,2, pch=16, main="Q-Q Plot, Author's Model", caption="")
plot(dat$lnpop[as.numeric(names(lm1.fix$residuals))],lm1.fix$residuals, pch=16, xlab="Log Population", ylab="Residuals",main="Population vs Residuals, Altered Model", cex=.75)
plot(lm1.fix,2, pch=16,main="Q-Q Plot, Altered Model", caption="")
y.loess <- loess(lm1.fix$residuals ~ dat$lnpop[as.numeric(names(lm1.fix$residuals))])
freq <- hist(dat$multish, main="Multilataral Aid Flows", xlab="Multilateral Aid Flows", col="red", breaks=100, plot=F)
plot(freq,main="Original", xlab="Multilateral Aid Flows", col="red", breaks=100) #plot the pre-transformed historgram
hist(dat$transform, main="Transformed", xlab="Multilateral Aid Flows", col="red", breaks=100) #plot the post-transformed histogram (lambda = .18)
ll.normal <- function(par,y,X){
beta <- par[1:ncol(X)]
sigma2 <- exp(par[ncol(X)+1])
-1/2 * (sum(log(sigma2) + (y -(X%*%beta))^2/sigma2))
}
it <- seq(11,16, by=.1)
save <- matrix(ncol=3, nrow=length(it))
for(i in 1:length(it)){
betas <- mvrnorm(10000, lm1$coefficients, n/(n-k)*sandwich(lm1))
covs <- apply(model.matrix(lm1),2,mean)
#Regular
covs[2] <- it[i]
covs[3] <- covs[2]^2
mu.at.mean <- covs%*%t(betas)
save[i,] <- c(mean(mu.at.mean), quantile(mu.at.mean,.025), quantile(mu.at.mean,.975))
}
plot(it, save[,1])
X <- model.matrix(lm1.fix)
y <- na.omit(dat$transform)
opt1 <- optim(par = rep(0, ncol(X) + 1), fn = ll.normal, y = y,
X = X, control = list(fnscale = -1), method = "BFGS", hessian = TRUE)
it <- seq(11,16, by=.1)
save2 <- matrix(ncol=3, nrow=length(it))
for(i in 1:length(it)){
betas <- mvrnorm(10000, opt1$par, solve(-opt1$hessian))
covs <- apply(model.matrix(lm1.fix),2,mean)
#Regular
covs[2] <- it[i]
covs[3] <- covs[2]^2
mu.at.mean <- covs%*%t(betas[,1:(ncol(betas)-1)])
params <- cbind(drop(mu.at.mean), exp(betas[,ncol(betas)]))
#untransformed y
y <- apply(params,1, function (x) rnorm(1000, x[1], x[2]))
#transformed y
y <- (y*.18 +1)^(1/.18)
print(paste(i, "out of", length(it)))
#save2[i,] <- c(mean(as.vector(y)), quantile(as.vector(y), .025), quantile(as.vector(y), .975))
save2[i,] <- c(mean(apply(y,2,mean, na.rm=T)), quantile(apply(y,2,mean, na.rm=T),.025), quantile(apply(y,2,mean, na.rm=T),.975))
}
library(readr)
apiTest <- read_csv("~/Documents/GitHub/BradelyTerryModel/apiTest.csv")
apiTest$id
apiTest$rating
install.packages("rstan")
library(rstan)
setwd("/Users/benjaminschneider/Documents/GitHub/BradelyTerryModel/")
load("fitExperiment2.7")
post.lambda = summary(fitExperiment2.7)$summary[paste0('a[',1:50,']'),'mean']
comparison<-cbind(apiTest$id,post.lambda)
comparison<-as.data.frame(comparison)
colnames(comparison)<-c("DocId", "Lambda")
dat<-read.csv("/Users/benjaminschneider/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
HIT<-read.csv("/Users/benjaminschneider/Documents/GitHub/BradelyTerryModel/exampleHITs.csv", header=T)
HIT<-dat[,3:5]
datatransform<-function(HIT){
vec<-rep(1:2, 1500)
HIT<-as.data.frame(cbind(HIT,vec))
colnames(HIT)<-c("comparison_id" ,"document_id", "result","num")
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==2){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==1){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT2<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
metaHIT<-rbind(newHIT,newHIT2)
return(metaHIT)
}
HIT2<-datatransform(HIT)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
dataReorganizer<-function(x){ #this is a function that does line 235-241 for a specified DocID
lambdax<-lambda[paste0(x),"Lambda"]
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
#
newData<-cbind(thisChoos, thisLambda)
newData
}
dataReorganizer(5011) #organizes the DF for x, the DocID
updateLambdax<-function(newData, lambdax, a=1, b=1){ #lambdax is the lmabda of DocIDx (5011); DataFrame, double, int, int
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
return(numerator/denominator)
}
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
x<-5011
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
rownames(lambda)<-lambda$DocId #rename each row the the DocID; the row names are strings/ characters
lambdax<-lambda[paste0(x),"Lambda"] #get the lambda value of x=5011
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
dataReorganizer<-function(x){ #this is a function that does line 235-241 for a specified DocID
lambdax<-lambda[paste0(x),"Lambda"]
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
#
newData<-cbind(thisChoos, thisLambda)
newData
}
dataReorganizer(5011) #organizes the DF for x, the DocID
updateLambdax<-function(newData, lambdax, a=1, b=1){ #lambdax is the lmabda of DocIDx (5011); DataFrame, double, int, int
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
return(numerator/denominator)
}
updateLambdax(newData=newData, lambdax=lambdax)
library(plyr)
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5012")
ob<-sapply(paste0(unique(lambda$DocId)), FUN=updateLambdax2, lambda=lambda, allData= toPassToC )
class(ob)
dataReorganizer()
updateLambdax(newData=newData, lambdax=lambdax)
b=1
sum(1/(lambdax+newData$Lambda))
plot(log(recovered$Lambda),comparison$Lambda)
rm(list=ls())
dat<-read.csv("/Users/benjaminschneider/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
datatransform<-function(HIT){
vec<-rep(1:2, 1500)
HIT<-as.data.frame(cbind(HIT,vec))
colnames(HIT)<-c("comparison_id" ,"document_id", "result","num")
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){ #create a vector of DocIDj composed of every other document_id, the document to which the document of interest of compared
if (HIT$num[i]==2){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i]) #create a vector of DocIDi composed every other document id, the document of interest
Choose<-c(Choose,HIT$result[i]) #1 indicates that the document of interest won; 0 indicates that the document of interest lost
}
}
newHIT<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
DocIDi<-NULL #repeat the same process, but reverse the order of comparison; this ultimately allows us to update all lambdas
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==1){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT2<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
metaHIT<-rbind(newHIT,newHIT2)
return(metaHIT)
}
HIT2<-datatransform(HIT)
DocId<-sort(unique(HIT$document_id), decreasing=F)
lambda<- as.data.frame(cbind(DocId, runif(50)))
colnames(lambda)<-c("DocIDj", "Lambda")
setwd("/Users/benjaminschneider/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
final<- function(hits, lambdas, DocIds, iterations){
lambda1<-lambdas$Lambda
for( i in 1:iterations){ #change arguments of lambdas
HIT3<-merge(hits, lambdas, by="DocIDj")
lambda1<-lambdaLoop2(hits=HIT2, DocIds = DocId,Hit3 = HIT3, extractLambda=lambda1)
lambda1<-lambda1[-1]
#print(c(lambda1, "here"))
#lambdas$Lambda<-lambda1[-1]
if (all(abs(lambda1-lambdas$Lambda)<1e-15)){
break
}
else{
lambdas$Lambda<-lambda1
}
}
return(lambda1)
}
final(HIT2, lambda, DocId,200 )
test1-test
library(microbenchmark)
microbenchmark(final(HIT2, lambda, DocId, 1000), times=10)
library(readr)
apiTest <- read_csv("~/Documents/GitHub/BradelyTerryModel/apiTest.csv")
install.packages("rstan")
install.packages("rstan")
library(rstan)
setwd("/Users/benjaminschneider/Documents/GitHub/BradelyTerryModel/")
load("fitExperiment2.7")
post.lambda = summary(fitExperiment2.7)$summary[paste0('a[',1:50,']'),'mean']
comparison<-cbind(apiTest$id,post.lambda)
comparison<-as.data.frame(comparison)
recovered<-final(HIT2, lambda, DocId,1200)
recovered
plot(log(recovered), comparison$Lambda)
cor(log(recovered), comparison$Lambda)
comparison$Lambda
comparison
plot(log(recovered), comparison$post.lambda)
cor(log(recovered), comparison$Lambda)
plot(log(recovered), comparison$post.lambda)
cor(log(recovered), comparison$post.lambda)
comparison
recovered
fitExperiment2.7
lambda
recovered<-final(HIT2, lambda, DocId, 2500)
plot(log(recovered), comparison$post.lambda)
cor(log(recovered), comparison$post.lambda)
compariso
comparison
apiTest
plot(log(recovered), apiTest$rating)
HIT2
plot(recovered, apiTest$rating)
lambda
DocId
comparison
DocId<-sort(unique(HIT$document_id), decreasing=F)
lambda<- as.data.frame(cbind(DocId, .5))
colnames(lambda)<-c("DocIDj", "Lambda")
HIT
lambda
DocId
recovered
post.lambda
plot(recovered, apiTest$rating)
plot(exp(recovered), apiTest$rating)
plot(log(recovered), apiTest$rating)
lambda
HIT2
bradleyterry<-function(a,b,id,lambda,dat){
browser()
subsetdata<-dat[dat$DocIDi %in% id,]#this subsets the dataset down to just the observations with the id that we are looking at
newlambda<-lambda[lambda$DocId %in% id,]#this extracts the specific DocID and lambda value we want to upgrade for the purpose of the equation
sumvec<-NULL #create null vectors to store our sum elements
lambdavec<-NULL #create null vector to extract the lambda elements we want
for(i in 1:nrow(subsetdata)){ #the purpose of thsi loop is to extract lambda j values for use in the next loop
lambdajsubset<-lambda[lambda$DocId %in% subsetdata$DocIDj[i],] #This picks out the lambda j values for each of the elements of the subset dataset
lambdavec<-c(lambdavec,lambdajsubset$Lambda) #this building the vector for use
}
for (i in 1:nrow(subsetdata)){
sumunit<-(1/(newlambda$Lambda+lambdavec[i])) #This creates the summation term unit by unit with the lambda i value and all of the respective lambda js
sumvec<-as.vector(c(sumvec,sumunit)) #this makes a vector of the summation terms
}
summationterm<-sum(sumvec) #here we sum the terms of the vector to plug into the equation
output<-(a-1+sum(subsetdata$Choose))/(b+summationterm) #this is where we finish up the equation and plug in all of our respective parts
return(output)
}
bradleyterry.multid<-function(a, b, id, lambda, dat){
output<-sapply(id, function(x) bradleyterry(a,b,id=x, lambda, dat))
output<-cbind(id,output)
output<-as.data.frame(output)
colnames(output)<-c('DocId','Lambda')
return(output)
}
iterative.bt<-function(a,b,id,lambda,dat, iterations){
for (i in 1:iterations){   # from 1 to number of iteration, the loop repeats below function
lambda<-bradleyterry.multid(a,b,id,lambda,dat) #run the code above for one doc id, a number of times determined by user
}
return(lambda) #returns the output as the number of iterations determined by the user.
}
recovered0<-iterative.bt(1,1,DocId,lambda,HIT2,10)
bradleyterry<-function(a,b,id,lambda,dat){
subsetdata<-dat[dat$DocIDi %in% id,]#this subsets the dataset down to just the observations with the id that we are looking at
newlambda<-lambda[lambda$DocId %in% id,]#this extracts the specific DocID and lambda value we want to upgrade for the purpose of the equation
sumvec<-NULL #create null vectors to store our sum elements
lambdavec<-NULL #create null vector to extract the lambda elements we want
for(i in 1:nrow(subsetdata)){ #the purpose of thsi loop is to extract lambda j values for use in the next loop
lambdajsubset<-lambda[lambda$DocId %in% subsetdata$DocIDj[i],] #This picks out the lambda j values for each of the elements of the subset dataset
lambdavec<-c(lambdavec,lambdajsubset$Lambda) #this building the vector for use
}
for (i in 1:nrow(subsetdata)){
sumunit<-(1/(newlambda$Lambda+lambdavec[i])) #This creates the summation term unit by unit with the lambda i value and all of the respective lambda js
sumvec<-as.vector(c(sumvec,sumunit)) #this makes a vector of the summation terms
}
summationterm<-sum(sumvec) #here we sum the terms of the vector to plug into the equation
output<-(a-1+sum(subsetdata$Choose))/(b+summationterm) #this is where we finish up the equation and plug in all of our respective parts
return(output)
}
recovered0<-iterative.bt(1,1,DocId,lambda,HIT2,10)
recovered<-final(HIT2, lambda, DocId, 10)
plot(recovered0,recovered)
plot(recovered0$Lambda,recovered)
recovered0<-iterative.bt(1,1,DocId,lambda,HIT2,1)
recovered<-final(HIT2, lambda, DocId, 1)
plot(recovered0$Lambda,recovered)
lambda
recovered0<-iterative.bt(1,1,DocId,lambda,HIT2,1)
recovered<-final(HIT2, lambda, DocId, 1)
recovered
recovered0
recovered0<-iterative.bt(1,1,DocId,lambda,HIT2,100)
recovered<-final(HIT2, lambda, DocId, 100)
final<- function(hits, lambdas, DocIds, iterations){
lambda1<-lambdas$Lambda
for( i in 1:iterations){ #change arguments of lambdas
HIT3<-merge(hits, lambdas, by="DocIDj")
lambda1<-lambdaLoop2(hits=hits, DocIds = DocId,Hit3 = HIT3, extractLambda=lambda1)
lambda1<-lambda1[-1]
#print(c(lambda1, "here"))
#lambdas$Lambda<-lambda1[-1]
if (all(abs(lambda1-lambdas$Lambda)<1e-15)){
break
}
else{
lambdas$Lambda<-lambda1
}
}
return(lambda1)
}
recovered0<-iterative.bt(1,1,DocId,lambda,HIT2,100)
recovered<-final(HIT2, lambda, DocId, 100)
plot(recovered0$Lambda,recovered)
plot(log(recovered0$Lambda),recovered)
plot(log(recovered0$Lambda),log(recovered))
final<- function(hits, lambdas, DocIds, iterations){
lambda1<-lambdas$Lambda
for( i in 1:iterations){ #change arguments of lambdas
HIT3<-merge(hits, lambdas, by="DocIDj")
lambda1<-lambdaLoop2(hits=hits, DocIds = DocIds, Hit3 = HIT3, extractLambda=lambda1)
lambda1<-lambda1[-1]
#print(c(lambda1, "here"))
#lambdas$Lambda<-lambda1[-1]
if (all(abs(lambda1-lambdas$Lambda)<1e-15)){
break
}
else{
lambdas$Lambda<-lambda1
}
}
return(lambda1)
}
recovered0<-iterative.bt(1,1,DocId,lambda,HIT2,1)
recovered<-final(HIT2, lambda, DocId, 1)
plot(log(recovered0$Lambda),log(recovered))
plot(recovered0$Lambda,log(recovered))
plot(recovered0$Lambda,recovered)
recovered<-final(HIT2, lambda, DocId, 1)
recovered0<-final(HIT2, lambda, DocId, 10)
plot(recovered0,recovered)
recovered0<-final(HIT2, lambda, DocId, 100)
plot(recovered0,recovered)
recovered<-final(HIT2, lambda, DocId, 1)
recovered0<-final(HIT2, lambda, DocId, 1000)
plot(recovered0,recovered)
plot(recovered,recovered)
plot(recovered0,recovered)
recovered<-final(HIT2, lambda, DocId, 1)
recovered0<-final(HIT2, lambda, DocId, 2)
plot(recovered0,recovered)
recovered0<-final(HIT2, lambda, DocId, 10)
plot(recovered0,recovered)
recovered0<-final(HIT2, lambda, DocId, 100)
plot(recovered0,recovered)
recovered0reg<-iterative.bt(1,1,DocId,lambda,HIT2,1)
recovered1reg<-iterative.bt(1,1,DocId,lambda,HIT2,10)
recovered0new<-final(HIT2, lambda, DocId, 1)
recovered1new<-final(HIT2, lambda, DocId, 10)
plot(recovered0new,recovered1new)
plot(recovered0reg$Lambda,recovered1reg$Lambda)
plot(recovered0new,recovered1new)
plot(recovered0reg$Lambda,recovered1reg$Lambda)
recovered0reg<-iterative.bt(1,1,DocId,lambda,HIT2,1)
recovered1reg<-iterative.bt(1,1,DocId,lambda,HIT2,2)
recovered0new<-final(HIT2, lambda, DocId, 1)
recovered1new<-final(HIT2, lambda, DocId, 2)
plot(recovered0new,recovered1new)
plot(recovered0reg$Lambda,recovered1reg$Lambda)
plot(recovered0new,recovered1new)
plot(recovered0reg$Lambda,recovered1reg$Lambda)
final<- function(hits, lambdas, DocIds, iterations){
lambda1<-lambdas$Lambda
for( i in 1:iterations){ #change arguments of lambdas
HIT3<-merge(hits, lambdas, by="DocIDj")
lambda1<-lambdaLoop2(hits=HIT2, DocIds = DocId,Hit3 = HIT3, extractLambda=lambda1)
lambda1<-lambda1[-1]
#print(c(lambda1, "here"))
#lambdas$Lambda<-lambda1[-1]
if (all(abs(lambda1-lambdas$Lambda)<1e-15)){
break
}
else{
lambdas$Lambda<-lambda1
}
}
return(lambda1)
}
final1<- function(hits, lambdas, DocIds, iterations){
lambda1<-lambdas$Lambda
for( i in 1:iterations){ #change arguments of lambdas
HIT3<-merge(hits, lambdas, by="DocIDj")
lambda1<-lambdaLoop2(hits=hits, DocIds = DocIds, Hit3 = HIT3, extractLambda=lambda1)
lambda1<-lambda1[-1]
#print(c(lambda1, "here"))
#lambdas$Lambda<-lambda1[-1]
if (all(abs(lambda1-lambdas$Lambda)<1e-15)){
break
}
else{
lambdas$Lambda<-lambda1
}
}
return(lambda1)
}
recovered0new<-final1(HIT2, lambda, DocId, 1)
recovered1new<-final(HIT2, lambda, DocId, 1)
plot(recovered0new,recovered1new)
recovered0new<-final1(HIT2, lambda, DocId, 100)
recovered1new<-final(HIT2, lambda, DocId, 100)
plot(recovered0new,recovered1new)
