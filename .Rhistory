mean(boot_means)
mean(gained_clean)
bootstrap.dist
bootstrap.dist<-sapply(resam[i],variance)
bootstrap.dist
resam
View(resam)
bootstrap.dist<-sapply(resam,variance)
bootstrap.dist
sam.pop<-rnorm(30,0,10)
theta.hat<-sum((sam.pop-mean(sam.pop)^2))/30
sam<-sample(sam.pop,10,replace=T)
resam<-replicate(500,sam)
variance<-function(x){sum((x-mean(x)^2))/10}
bootstrap.dist<-sapply(resam,variance)
bootstrap.dist<-lapply(resam,variance)
bootstrap.dist
bootstrap.dist<-lapply(resam[,i],variance)
bootstrap.dist
class(resam)
ncol(resam)
bootstrap.dist<-lapply(resam[,i],variance)
bootstrap.dist
library(resample)
install.packages("resample")
library(resample)
colVars(resam)
resam<-as.data.frame(replicate(500,sam))
colVars(resam)
resam
sam.pop<-rnorm(30,0,10)
theta.hat<-sum((sam.pop-mean(sam.pop)^2))/30
sam<-sample(sam.pop,10,replace=T)
resam<-as.data.frame(replicate(500,sam))
resam
View(resam)
set.seed(Sys.time())
sam.pop<-rnorm(30,0,10)
theta.hat<-sum((sam.pop-mean(sam.pop)^2))/30
sam<-sample(sam.pop,10,replace=T)
resam<-as.data.frame(replicate(500,sam))
resam
View(resam)
resam<-resamples <- lapply(1:500, function(i) sample(sam.pop, replace = T))
resam
ncol(resam)
resam<-as.data.frame(resam)
ncol(resam)
bootstrap.dist<-lapply(resam[,i],variance)
variance<-function(x){sum((x-mean(x)^2))/10}
bootstrap.dist<-lapply(resam[,i],variance)
colVars(resam)
View(resam)
sam.pop<-rnorm(30,0,10)
resam <- lapply(1:500, function(i) sample(sam.pop, replace = T))
sam.pop<-rnorm(10,0,10)
resam <- lapply(1:500, function(i) sample(sam.pop, replace = T))
resam <- lapply(1:500, function(i) sample(10,sam.pop, replace = T))
sam.pop<-rnorm(10,0,10)
resamples <- lapply(1:500, function(i) sample(sam.pop,10, replace = T))
resamples
variance<-function(x){sum((x-mean(x)^2))/10}
resamples<-as.data.frame(resam)
resamples<-as.data.frame(resam)
resamples<-as.data.frame(resamples)
resamples
View(resamples)
sam.pop<-rnorm(30,0,10)
resamples <- lapply(1:500, function(i) sample(sam.pop,10, replace = T))
resamples
bootstrap.dist<-lapply(resam[,i],variance)
bootstrap.dist<-lapply(resam[i],variance)
bootstrap.dist<-lapply(resam[[i]],variance)
bootstrap.dist<-lapply(resamples[[i]],variance)
bootstrap.dist<-lapply(resamples[i],variance)
resamples<-as.data.frame(resamples)
View(resamples)
bootstrap.dist<-lapply(resamples,variance)
bootstrap.dist
hist(bootstrap.dist)
bootstrap.dist
hist(bootstrap.dist[1,])
bootstrap.dist
View(resamples)
data <- round(rnorm(100, 0, 10))
data[1:10]
resamples <- lapply(1:500, function(i) sample(data, replace = T))
resamples[1]
data <- round(rnorm(10, 0, 10))
data[1:10]
#obtaining 20 bootstrap samples
#display the first of the bootstrap samples
resamples <- lapply(1:500, function(i) sample(data, replace = T))
resamples[1]
sapply(resamples, var)
r.var<-sapply(resamples, var)
boot(data, var, R=500)
variance<-function(x){sum(x-mean(x))^2/10}
r.var<-sapply(resamples, variance)
r.var
boot(data, variance, R=500)
r.var<-sapply(resamples, var)
r.var
boot(data, var, R=500)
var(data)
var(mean(r.var))
r.var
mean(r.var)
theta.hat<-var(data)
theta.bar.star<-mean(r.var)
theta.bar.star-theta.hat
theta.bar.star-theta.hat
boot(data, var, R=500)
libarary(pipeline)
library(pipeline)
library(faraway)
pipeline
lm(Lab~Filed,pipeline)
lm(Lab~Field,pipeline)
cov2cor(pipeline)
reg<-lm(Lab~Field,pipeline)
vcov(reg)[2,2]
vcov(reg)
vcov(reg)[2,2]
reg
library(faraway)
data(pipeline)
i <- order(pipeline$Field)
npipe <- pipeline[i,]
ff <- gl(12,9)[-108]
meanfield <- unlist(lapply(split(npipe$Field,ff),mean))
varlab <- unlist(lapply(split(npipe$Lab, ff),var))
meanfield
varlab
lm(log(varlab)~log(meanfield))
lm(log(meanfield)~log(varlab))
lm(log(varlab)~log(meanfield))
wts <- 1/fitted(lm(log(varlab)~log(meanfield)))^2
wts
model.2 <- lm(Lab ~ Field,data=pipeline, weights=wts)
model.2 <- lm(Lab ~ Field-1,data=pipeline, weights=wts)
wts
wts<-wts[1:11]
wts
model.2 <- lm(Lab ~ Field,data=pipeline, weights=wts)
wts
lm(log(varlab)~log(meanfield))
wts<-c(-0.3538  ,        1.1244 )
model.2 <- lm(Lab ~ Field,data=pipeline, weights=1/wts)
wts<-c(-0.3538  )
model.2 <- lm(Lab ~ Field,data=pipeline, weights=1/wts)
reg<-lm(Lab~Field,pipeline)
vcov(reg)[2,2] #nonconstance variance of coeff of the model
model.2 <- lm(Lab ~ Field,data=pipeline, weights=1/ 1.1244)
reg<-lm(Lab~Field,pipeline)
reg
wts <- 1/fitted(lm(log(varlab)~log(meanfield)))^2
wts
weights=1/wts
weights
model <- lm(Lab ~ Field,data=pipeline, weights=1/wts)
lm(log(varlab)~log(meanfield))
wts <- 1/fitted(lm(log(varlab)~log(meanfield)))^2
varlab
wts<-wts[1:11]
wts
model <- lm(Lab ~ Field,data=pipeline, weights=1/wts)
model <- lm(Lab ~ Field,data=pipeline, weights=1/wts)
weights=1/wts
weights
wts <- 1/fitted(lm(log(varlab)~log(meanfield)))^2
model <- lm(Lab ~ Field,data=pipeline, weights=1/wts)
lm(log(varlab)~log(meanfield))
data <- round(rnorm(10, 0, 10))
data[1:10]
resamples <- lapply(1:500, function(i) sample(data, replace = T))
resamples[1]
r.var<-sapply(resamples, var)
theta.hat<-var(data)
theta.bar.star<-mean(r.var)
theta.bar.star-theta.hat #answer
data <- (rnorm(10, 0, 10))
data[1:10]
resamples <- lapply(1:500, function(i) sample(data, replace = T))
resamples[1]
r.var<-sapply(resamples, var)
theta.hat<-var(data)
theta.bar.star<-mean(r.var)
theta.bar.star-theta.hat #answer
data <- (rnorm(10, 0, 10))
resamples <- lapply(1:500, function(i) sample(data, replace = T))
resamples[1]
r.var<-sapply(resamples, var)
theta.hat<-var(data)
theta.bar.star<-mean(r.var)
theta.bar.star-theta.hat #answer
data <- (rnorm(10, 0, 10))
resamples <- lapply(1:5000, function(i) sample(data, replace = T))
resamples[1]
r.var<-sapply(resamples, var)
theta.hat<-var(data)
theta.bar.star<-mean(r.var)
theta.bar.star-theta.hat #answer
resamples <- lapply(1:5000, function(i) sample(data, replace = T))
resamples[1]
r.var<-sapply(resamples, var)
theta.hat<-var(data)
theta.bar.star<-mean(r.var)
theta.bar.star-theta.hat #answer
data <- (rnorm(10, 0, 10))
resamples <- lapply(1:5000, function(i) sample(data, replace = T))
resamples[1]
r.var<-sapply(resamples, var)
theta.hat<-var(data)
theta.bar.star<-mean(r.var)
theta.bar.star-theta.hat #answer
data <- (rnorm(10, 0, 10))
resamples <- lapply(1:50000, function(i) sample(data, replace = T))
resamples[1]
r.var<-sapply(resamples, var)
theta.hat<-var(data)
theta.bar.star<-mean(r.var)
theta.bar.star-theta.hat #answer
lm1IM
data <- (rnorm(10, 0, 10))
#resample
resamples <- lapply(1:500, function(i) sample(data, replace = T))
resamples[1]
#variance of each resamples
r.var<-sapply(resamples, var)
#parameter
theta.hat<-var(data)
#bootstrapping
theta.bar.star<-mean(r.var)
#bias
theta.bar.star-theta.hat #answer
#The bias is not exactly same with theoretical value of bias.
data <- (rnorm(10, 0, 10))
#resample
resamples <- lapply(1:500, function(i) sample(data, replace = T))
resamples[1]
#variance of each resamples
r.var<-sapply(resamples, var)
#parameter
theta.hat<-var(data)
#bootstrapping
theta.bar.star<-mean(r.var)
#bias
theta.bar.star-theta.hat #answer
#The bias is not exactly same with theoretical value of bias.
data <- (rnorm(100, 0, 10))
resamples <- lapply(1:500, function(i) sample(data, replace = T))
resamples[1]
r.var<-sapply(resamples, var)
theta.hat<-var(data)
theta.bar.star<-mean(r.var)
theta.bar.star-theta.hat #answer
n      = rep(1:100,2)
a      = 0
b      = 1
sigma2 = n^1.3
eps    = rnorm(n,mean=0,sd=sqrt(sigma2))
y      = a+b*n + eps
mod    = lm(y ~ n)
res    = residuals(mod)
plot(n,y)
abline(coef(mod), col="red")
plot(mod, which=3)
n      = rep(1:100,2)
a      = 0
b      = 1
sigma2 = n^2
eps    = rnorm(n,mean=0,sd=sqrt(sigma2))
y      = a+b*n + eps
mod    = lm(y ~ n)
res    = residuals(mod)
plot(n,y)
abline(coef(mod), col="red")
n      = rep(1:100,2)
a      = 0
b      = 1
sigma2 = n^1.3
eps    = rnorm(n,mean=0,sd=sqrt(sigma2))
y      = a+b*n + eps
mod    = lm(y ~ n)
res    = residuals(mod)
plot(n,y)
abline(coef(mod), col="red")
n      = rep(1:100,2)
a      = 0
b      = 1
sigma2 = n^2
eps    = rnorm(n,mean=0,sd=sqrt(sigma2))
y      = a+b*n + eps
mod    = lm(y ~ n)
res    = residuals(mod)
plot(n,y)
abline(coef(mod), col="red")
n      = rep(1:100,2)
a      = 0
b      = 1
sigma2 = n^1.5
eps    = rnorm(n,mean=0,sd=sqrt(sigma2))
y      = a+b*n + eps
mod    = lm(y ~ n)
res    = residuals(mod)
plot(n,y)
abline(coef(mod), col="red")
n
x      = rep(1:100,2)
a      = 0
b      = 1
sigma2 = n^1.5
eps    = rnorm(n,mean=0,sd=sqrt(sigma2))
y      = a+b*x + eps
mod    = lm(y ~ x)
res    = residuals(mod)
plot(x,y)
abline(coef(mod), col="red")
x      = (1:100)
a      = 0
b      = 1
sigma2 = n^1.5
eps    = rnorm(n,mean=0,sd=sqrt(sigma2))
y      = a+b*x + eps
mod    = lm(y ~ x)
res    = residuals(mod)
x      = (1:100)
x
a      = 0
b      = 1
sigma2 = n^1.5
eps    = rnorm(n,mean=0,sd=sqrt(sigma2))
x      = (1:100)
a      = 0
b      = 1
sigma2 = x^1.5
eps    = rnorm(n,mean=0,sd=sqrt(sigma2))
y      = a+b*x + eps
mod    = lm(y ~ x)
res    = residuals(mod)
x      = (1:100)
a      = 0
b      = 1
sigma2 = x^1.5
eps    = rnorm(x,mean=0,sd=sqrt(sigma2))
y      = a+b*x + eps
mod    = lm(y ~ x)
res    = residuals(mod)
plot(x,y)
abline(coef(mod), col="red")
sample(100,x,replace = T)
sample(100,x,replace = T)
sample(x,size=100,replace = T)
resamples <- lapply(1:500, function(i) sample(x, replace = T))
resamples
lm(resamples_y~resamples_x)
resamples_x <- lapply(1:500, function(i) sample(x, replace = T))
resamples_y <- lapply(1:500, function(i) sample(x, replace = T))
lm(resamples_y~resamples_x)
lm(resamples_y[1]~resamples_x[1])
lm(resamples_y[[1]]~resamples_x[[1]])
lm(resamples_y[[i]]~resamples_x[[i]])[2]
lm(resamples_y[[1]]~resamples_x[[1]])[2]
lm(resamples_y[[1]]~resamples_x[[1]])$coefficient
lm(resamples_y[[1]]~resamples_x[[1]])$coefficient[1]
lm(resamples_y[[1]]~resamples_x[[1]])$coefficient[2]
for (i in 1:500){
dat<-NULL
dat<-lm(resamples_y[[i]]~resamples_x[[i]])$coefficient[2]
}
dat
dat<-as.data.frame(matrix(, nrow=500))
dat
dat<-as.data.frame(matrix(, nrow=500))
for (i in 1:500){
dat[i]<-lm(resamples_y[[i]]~resamples_x[[i]])$coefficient[2]
}
dat
dat<-as.data.frame(matrix(, nrow=500))
for (i in 1:500){
dat[i,1]<-lm(resamples_y[[i]]~resamples_x[[i]])$coefficient[2]
}
dat
mod
mod$coefficients[2]
mean(dat$V1)
actual
actual<-mod$coefficients[2]
actual
mean_boot<-mean(dat$V1)
mean_boot
cbind(x,y)
x<-as.data.frame(x)
y<-as.data.frame(y)
x
comb<-cbind(x,y)
actual
pred.y<-predict(comb, newdata = validation[,-1],interval='prediction',level=0.95)
x<-as.matrix(x)
y<-as.matrix(y)
comb<-cbind(x,y)
pred.y<-predict(comb, newdata = validation[,-1],interval='prediction',level=0.95)
class(x)
x      = (1:100)
y      = a+b*x + eps
x<-as.matrix(x)
y<-as.matrix(y)
comb<-cbind(x,y)
actual
class(x)
pred.y<-predict(comb, newdata = validation[,-1],interval='prediction',level=0.95)
class(x)
class(y)
comb<-cbind(x,y)
x      = (1:100)
y      = a+b*x + eps
x
y
comb<-cbind(x,y)
comb
pred.y<-predict(comb, newdata = validation[,-1],interval='prediction',level=0.95)
class(x)
pred.y<-coef(mod)[1] + 1*coef(mod)[2]
pred.y
pred.y<-coef(mod)[1] + 1*coef(mod)[2]
pred.y<-coef(mod)[1] + x*coef(mod)[2]
pred.y
eps
resamples_eps
resamples_eps <- lapply(1:500, function(i) sample(eps, replace = T))
resamples_eps
dat2<-as.data.frame(matrix(, nrow=500))
dat2
dat2<-as.data.frame(matrix(, nrow=500,ncol=2))
for (i in 1:500){
dat2[i,1]<-pred.y+resample[[i]]
dat2[i,2]<-lm(dat2$V1~x)$coefficient[2]
}
dat2
dat2<-as.data.frame(matrix(, nrow=500,ncol=2))
for (i in 1:500){
dat2[i,1]<-pred.y+resamples_eps[[i]]
dat2[i,2]<-lm(dat2$V1~x)$coefficient[2]
}
dat2<-as.data.frame(matrix(, nrow=500,ncol=1))
for (i in 1:500){
ys<-pred.y+resamples_eps[[i]]
dat2[i,1]<-lm(dat2$V1~x)$coefficient[2]
}
dat2<-as.data.frame(matrix(, nrow=500,ncol=1))
for (i in 1:500){
ys<-pred.y+resamples_eps[[i]]
dat2[i,1]<-lm(ys~x)$coefficient[2]
}
dat2
mean_boot<-mean(dat2$V1)
actual<-mod$coefficients[2]
mean_boot
actual
install.packages("RcppArmadillo")
library("RcppArmadillo")
library(dplyr)
install.packages("nycflights13")
data(flights)
library(nycflights13)
data(flights)
head(flights)
justMay<-filter(flights, month==5)
head(justMay)
class(justMay)
arrange(flights, day)
arrange(flights, desc(day))
select(flights, year)
select(flights, year:day)
summarise(flights, delay=mean(dep_delay, na.rm=TRUE))
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay=mean(dep_delay, na.rm=TRUE))
by_day
summarise(by_day, delay=mean(dep_delay, na.rm=TRUE))
n(1)
n(by_day)
require(devtools)
install_github("mattblackwell/DirectEffects", ref = "master")
setwd('C:/Users/dell/Documents/GitHub/BradelyTerryModel')
sourceCpp('rcpp_ex2.cpp')
library(Rcpp)
setwd('C:/Users/dell/Documents/GitHub/BradelyTerryModel')
sourceCpp('rcpp_ex2.cpp')
library(Rcpp)
setwd('C:/Users/dell/Documents/GitHub/BradelyTerryModel')
sourceCpp('rcpp_ex2.cpp')
library(Rcpp)
setwd('C:/Users/dell/Documents/GitHub/BradelyTerryModel')
sourceCpp('rcpp_ex2.cpp')
x = data.frame( DocIdi = 1:10, DocIdj = 1:10, choose=sample(c(0,1), 10, replace=T))
ids = 5:7
ex_fun1(x, ids)
k<-ex_fun1(x, ids)
k[DocIDj]
k
class(k)
k['DocIDj']
DataFrame k['DocIDj']
k['DocIDj'];
k
NumericVector v1 = k['DocIDj'];
NumericVector v1 = k['DocIDj']
NumericVector v1 = k['DocIDi'];
k
NumericVector v1 = k[1];
sourceCpp('rcpp_ex2.cpp')
