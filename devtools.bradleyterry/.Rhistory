lambda<-as.data.frame(lambda)
datatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
subsetdata2<-lambda[lambda$DocId %in% i,]
#for(i in 1:length(docid)){
lambdalist[[i]]<-subsetdata2
#}
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4990]]
test2[[4991]]
test2<-datatrans(DocId,lambda)
test2[[4991]]$DocId
rm(list=ls())
library(faraway)
divusa
mod<-lm(divorce~ unemployed+femlab+marriage+birth+military, divusa)
plot(residuals(mod)[-1], residuals(mod)[-length(residuals(mod))])
length(residuals(mod))
plot(residuals(mod)[-1], residuals(mod)[-length(residuals(mod))],
xlab="Residuals of Observation 2 through 78",
ylab='Residuals of Observation 1 through 77',
main="Correlation of Residuals")
plot(residuals(mod)[-1], residuals(mod)[-length(residuals(mod))],
ylab="Residuals of Observation 2 through 78",
xlab='Residuals of Observation 1 through 77',
main="Correlation of Residuals")
require(nlme)
gmod<-gls(divorce~ unemployed+femlab+marriage+birth+military, divusa,
correlation = corAR1(form=~year), method = "ML")
gmod
sumary(gmod)
summary(gmod)
sumg<-summary(gmod)
sumg[1]
sumg[2]
sumg[3]
sumg[4]
intervals(gmod, which="var-cov")
intervals(gmod, which="var-cov")[1]
intervals(gmod, which="var-cov")$corStruct
plot(gmod)
cochrane.orcutt.lm <- function(mod){
X <- model.matrix(mod)
y <- model.response(model.frame(mod))
e <- residuals(mod)
n <- length(e)
names <- colnames(X)
rho <- sum(e[1:(n-1)]*e[2:n])/sum(e^2)
y <- y[2:n] - rho * y[1:(n-1)]
X <- X[2:n,] - rho * X[1:(n-1),]
mod <- lm(y ~ X - 1)
result <- list()
result$coefficients <- coef(mod)
names(result$coefficients) <- names
summary <- summary(mod, corr = F)
result$cov <- (summary$sigma^2) * summary$cov.unscaled
dimnames(result$cov) <- list(names, names)
result$sigma <- summary$sigma
result$rho <- rho
class(result) <- 'cochrane.orcutt'
result
}
cmod<-cochrane.orcutt.lm(mod)
prais.winsten <- function(mod, ...){
UseMethod("prais.winsten")
}
prais.winsten.lm <- function(mod){
X <- model.matrix(mod)
y <- model.response(model.frame(mod))
e <- residuals(mod)
n <- length(e)
names <- colnames(X)
rho <- sum(e[1:(n-1)]*e[2:n])/sum(e^2)
y <- c(y[1] * (1 - rho^2)^0.5, y[2:n] - rho * y[1:(n-1)])
X <- rbind(X[1,] * (1 - rho^2)^0.5, X[2:n,] - rho * X[1:(n-1),])
mod <- lm(y ~ X - 1)
result <- list()
result$coefficients <- coef(mod)
names(result$coefficients) <- names
summary <- summary(mod, corr = F)
result$cov <- (summary$sigma^2) * summary$cov.unscaled
dimnames(result$cov) <- list(names, names)
result$sigma <- summary$sigma
result$rho <- rho
class(result) <- 'prais.winsten'
result
}
pmod<-prais.winsten.lm(mod)
plot(pmod$coefficients
)
pmod$coefficients
pmod
pmod$coefficients/pmod$sigma
summary(mod)$coefficients
2.48/3.39
qnorm(.731)
pnorm(.731)
pmod$coefficients/pmod$sigma
cmod$coefficients/cmod$sigma
carr::durbinWatsonTest(mod)
car::durbinWatsonTest(mod)
plot(mod$residuals)
par(mfrow=c(1,2))
plot(mod$residuals, ylab="Residuals", main="Index Plot of Residuals")
plot(residuals(mod)[-1], residuals(mod)[-length(residuals(mod))],
ylab="Residuals of Observation 2 through 78",
xlab='Residuals of Observation 1 through 77',
main="Correlation of Residuals")
dev.off()
par(mfrow=c(1,2))
plot(mod$residuals, ylab="Residuals", main="Index Plot of Residuals")
plot(residuals(mod)[-1], residuals(mod)[-length(residuals(mod))],
ylab="Residuals at Period t+1",
xlab='Residuals at Period t',
main="Correlation of Residuals")
install.packages("prais")
library(prais)
prais.winsten(divorce~ unemployed+femlab+marriage+birth+military, divusa)
prais.winsten(lm(divorce~ unemployed+femlab+marriage+birth+military, divusa))
garret<-read.table('C:/Users/zoeja/OneDrive/Documents/Spring2018/QPM 1/Week 12/garrett1998.tab', header=T)
ols<-lm(gdp~leftlab+corp+infl+capmob, garret)
ols1<-lm(gdp~leftlab+corp+infl+factor(capmob), garret)
carr::durbinWatsonTest(ols)
car::durbinWatsonTest(ols)
glm(gdp~leftlab+corp+infl+capmob+factor(country), garret, method='ML')
gls(gdp~leftlab+corp+infl+capmob+factor(country), garret, method='ML', correlation = corAR1(form~country))
lag(garret, 1)
install.packages("Hmisc")
library(Hmisc)
class(garret)
garret$leftlag<-Lag(garret$leftlab, -1)
garret$gdplag<-Lag(garret$gdp, -1)
plm(gdp~gdplag+leftlab+leftlag+corp+infl+capmob+country, garret, index = 'country', model='within')
ADL<-plm(gdp~gdplag+leftlab+leftlag+corp+infl+capmob+country, garret, index = 'country', model='within')
summary(ADL)
fgls
install.packages("FGLS")
library(fgls)
library(FGLS)
install.packages("RFGLS")
library(RFGLS)
fgls(gdp~gdplag+leftlab+leftlag+corp+infl+capmob+factor(country), garret)
summary(ADL)$coefficients
summary(ADL)[3]
summary(ADL)[1]
summary(ADL)[2]
summary(ADL)[4]
summary(ADL)[5]
summary(ADL)[6]
summary(ADL)[7]
summary(ADL)[8]
nrow(garret)
head(garret)
unique(garret$year)
length(unique(garret$year))
cochrane.orcutt.lm <- function(mod){
X <- model.matrix(mod)
y <- model.response(model.frame(mod))
e <- residuals(mod)
n <- length(e)
names <- colnames(X)
rho <- sum(e[1:(n-1)]*e[2:n])/sum(e^2)
y <- y[2:n] - rho * y[1:(n-1)]
X <- X[2:n,] - rho * X[1:(n-1),]
mod <- lm(y ~ X - 1)
result <- list()
result$coefficients <- coef(mod)
names(result$coefficients) <- names
summary <- summary(mod, corr = F)
result$cov <- (summary$sigma^2) * summary$cov.unscaled
dimnames(result$cov) <- list(names, names)
result$sigma <- summary$sigma
result$rho <- rho
class(result) <- 'cochrane.orcutt'
result
}
cochrane.orcutt.lm(ADL)$rho
cochrane.orcutt.lm(ADL)
cochrane.orcutt.lm <- function(mod){
X <- model.matrix(mod)
y <- model.response(model.frame(mod))
e <- residuals(mod)
n <- length(e)
names <- colnames(X)
rho <- sum(e[1:(n-1)]*e[2:n])/sum(e^2)
y <- y[2:n] - rho * y[1:(n-1)]
X <- X[2:n,] - rho * X[1:(n-1),]
mod <- lm(y ~ X - 1)
result <- list()
result$coefficients <- coef(mod)
names(result$coefficients) <- names
summary <- summary(mod, corr = F)
result$cov <- (summary$sigma^2) * summary$cov.unscaled
dimnames(result$cov) <- list(names, names)
result$sigma <- summary$sigma
result$rho <- rho
class(result) <- 'cochrane.orcutt'
result
}
ADL1<-lm(gdp~gdplag+leftlab+leftlag+corp+infl+capmob+country, garret, index = 'country', model='within')
ADL1<-lm(gdp~gdplag+leftlab+leftlag+corp+infl+capmob+factor(country), garret)
summary(ADL)
cochrane.orcutt.lm(ADL)$rho
ADL<-lm(gdp~gdplag+leftlab+leftlag+corp+infl+capmob+factor(country), garret)
cochrane.orcutt.lm(ADL)$rho
(.07-1)/24
(.027-.062)/(1-.143)
summary(ADL)$coefficients
summary(ADL)$coefficients[1:7,]
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry")
dat<-read.csv("/Users/benjaminschneider/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
datatransform<-function(HIT){
vec<-rep(1:2, 1500)
HIT<-cbind(HIT,vec)
HIT<-as.data.frame((HIT))
colnames(HIT)<-c("comparison_id" ,"document_id", "result","num")
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==2){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==1){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT2<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
metaHIT<-rbind(newHIT,newHIT2)
return(metaHIT)
}
HIT2<-datatransform(HIT)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = c(1-prob, prob))#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
lambda
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = c(1-prob, prob))#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
datatrans<-function(docid,dataset){
outputlist<-NULL
outputlist<-as.list(outputlist)
for (i in docid){
subsetdata1<-dataset[dataset$DocIDi %in% i,]
#for(i in 1:length(docid)){
outputlist[[i]]<-subsetdata1
#}
}
return(outputlist)
}
test1<-datatrans(DocId,HIT2)
test1[[4990]]
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
subsetdata2<-lambda[lambda$DocId %in% i,]
#for(i in 1:length(docid)){
lambdalist[[i]]<-subsetdata2
#}
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4991]]$DocId
test2[[4991]]
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = c(1-prob, prob))#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = 1-prob)#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
lambda
docid
DocId
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
subsetdata2<-lambda[lambda$DocId %in% i,]
#for(i in 1:length(docid)){
lambdalist[[i]]<-subsetdata2
#}
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4991]]
test2[[4990]]
lambda[lambda$DocId %in% 4990,]
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
subsetdata2<-lambda[lambda$DocId %in% 4990,]
#for(i in 1:length(docid)){
lambdalist[[i]]<-subsetdata2
#}
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4990]]
datatrans<-function(docid,dataset){
outputlist<-NULL
outputlist<-as.list(outputlist)
for (i in docid){
outputlist[[i]]<-dataset[dataset$DocIDi %in% i,]
}
return(outputlist)
}
test1<-datatrans(DocId,HIT2)
test1[[4990]]
lambda$DocId
lambda
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4990]]
test2
tail(test2)
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[i]<-lambda[lambda$DocId %in% i,]
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
tail(test2)
lambdalist<-NULL
lambdalist[[4990]]
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% 4990,]
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4990]]
lambdalist
head(lambda)
HIT2
test2<-datatrans(DocId,HIT2)
test2[[4990]]
head(dataset)
head(HIT2)
datatrans<-function(docid,dataset){
outputlist<-NULL
outputlist<-as.list(outputlist)
for (i in docid){
outputlist[[i]]<-dataset[dataset$DocIDi %in% i,]
}
return(outputlist)
}
test1<-datatrans(DocId,HIT2)
test1[[4990]]
test1[[5000]]
head(lambda)
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4990]]
test2[[1]]
lambda[lambda$DocId %in% 4990,]
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
browser()
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
}
return(lambdalist)
}
head(lambda)
test2<-lambdatrans(DocId,lambda)
test2[[1]]
test2[[4990]]
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
browser()
}
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
browser()
}
return(lambdalist)
}
test2<-lambdatrans(DocId,lambda)
View(lambda)
lambdalist
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
dat
source('~/.active-rstudio-document')
