class(result) <- 'cochrane.orcutt'
result
}
ADL1<-lm(gdp~gdplag+leftlab+leftlag+corp+infl+capmob+country, garret, index = 'country', model='within')
ADL1<-lm(gdp~gdplag+leftlab+leftlag+corp+infl+capmob+factor(country), garret)
summary(ADL)
cochrane.orcutt.lm(ADL)$rho
ADL<-lm(gdp~gdplag+leftlab+leftlag+corp+infl+capmob+factor(country), garret)
cochrane.orcutt.lm(ADL)$rho
(.07-1)/24
(.027-.062)/(1-.143)
summary(ADL)$coefficients
summary(ADL)$coefficients[1:7,]
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry")
dat<-read.csv("/Users/benjaminschneider/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
datatransform<-function(HIT){
vec<-rep(1:2, 1500)
HIT<-cbind(HIT,vec)
HIT<-as.data.frame((HIT))
colnames(HIT)<-c("comparison_id" ,"document_id", "result","num")
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==2){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==1){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT2<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
metaHIT<-rbind(newHIT,newHIT2)
return(metaHIT)
}
HIT2<-datatransform(HIT)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = c(1-prob, prob))#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
lambda
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = c(1-prob, prob))#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
datatrans<-function(docid,dataset){
outputlist<-NULL
outputlist<-as.list(outputlist)
for (i in docid){
subsetdata1<-dataset[dataset$DocIDi %in% i,]
#for(i in 1:length(docid)){
outputlist[[i]]<-subsetdata1
#}
}
return(outputlist)
}
test1<-datatrans(DocId,HIT2)
test1[[4990]]
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
subsetdata2<-lambda[lambda$DocId %in% i,]
#for(i in 1:length(docid)){
lambdalist[[i]]<-subsetdata2
#}
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4991]]$DocId
test2[[4991]]
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = c(1-prob, prob))#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = 1-prob)#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
lambda
docid
DocId
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
subsetdata2<-lambda[lambda$DocId %in% i,]
#for(i in 1:length(docid)){
lambdalist[[i]]<-subsetdata2
#}
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4991]]
test2[[4990]]
lambda[lambda$DocId %in% 4990,]
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
subsetdata2<-lambda[lambda$DocId %in% 4990,]
#for(i in 1:length(docid)){
lambdalist[[i]]<-subsetdata2
#}
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4990]]
datatrans<-function(docid,dataset){
outputlist<-NULL
outputlist<-as.list(outputlist)
for (i in docid){
outputlist[[i]]<-dataset[dataset$DocIDi %in% i,]
}
return(outputlist)
}
test1<-datatrans(DocId,HIT2)
test1[[4990]]
lambda$DocId
lambda
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4990]]
test2
tail(test2)
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[i]<-lambda[lambda$DocId %in% i,]
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
tail(test2)
lambdalist<-NULL
lambdalist[[4990]]
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% 4990,]
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4990]]
lambdalist
head(lambda)
HIT2
test2<-datatrans(DocId,HIT2)
test2[[4990]]
head(dataset)
head(HIT2)
datatrans<-function(docid,dataset){
outputlist<-NULL
outputlist<-as.list(outputlist)
for (i in docid){
outputlist[[i]]<-dataset[dataset$DocIDi %in% i,]
}
return(outputlist)
}
test1<-datatrans(DocId,HIT2)
test1[[4990]]
test1[[5000]]
head(lambda)
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
test2[[4990]]
test2[[1]]
lambda[lambda$DocId %in% 4990,]
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
browser()
}
return(lambdalist)
}
test2<-datatrans(DocId,lambda)
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
}
return(lambdalist)
}
head(lambda)
test2<-lambdatrans(DocId,lambda)
test2[[1]]
test2[[4990]]
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
browser()
}
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
browser()
}
return(lambdalist)
}
test2<-lambdatrans(DocId,lambda)
View(lambda)
lambdalist
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
dat
source('~/.active-rstudio-document')
HIT<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/exampleHITs.csv", header=T)
datatransform<-function(HIT){
vec<-rep(1:2, 1500)
HIT<-cbind(HIT,vec)
HIT<-as.data.frame((HIT))
colnames(HIT)<-c("comparison_id" ,"document_id", "result","num")
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==2){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==1){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT2<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
metaHIT<-rbind(newHIT,newHIT2)
return(metaHIT)
}
HIT2<-datatransform(HIT)
HIT2
lambda
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
rownames(lambda)<-lambda$DocId
lambda
lambdax<-lambda[paste0(x),"Lambda"]
x<-5011 #DocId that I choose to update
lambdax<-lambda[paste0(x),"Lambda"]
lambdax
lambdax<-lambda[paste0(x),"Lambda"]
lambdax
lambda
x<-5011 #DocId that I choose to update
rownames(lambda)<-lambda$DocId #change row names as DocId
lambdax<-lambda[paste0(x),"Lambda"]
lambdax
paste0(x)
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisChoos
newData<-cbind(thisChoos, thisLambda)
newData
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
newData<-cbind(thisChoos, thisLambda)
newData
thisLambda
lambda
head(HIT2)
datatrans<-function(docid,dat){
outputlist<-NULL
outputlist<-as.list(outputlist)
for (i in docid){
outputlist[[i]]<-dat[dat$DocIDi %in% i,]
}
return(outputlist)
}
test1<-datatrans(DocId,HIT2)
test1[[5000]]
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
View(lambda)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = c(1-prob, prob))#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
View(lambda)
HIT<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/exampleHITs.csv", header=T)
HIT<-dat[,3:5]
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
datatransform<-function(HIT){
vec<-rep(1:2, 1500)
HIT<-cbind(HIT,vec)
HIT<-as.data.frame((HIT))
colnames(HIT)<-c("comparison_id" ,"document_id", "result","num")
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==2){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==1){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT2<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
metaHIT<-rbind(newHIT,newHIT2)
return(metaHIT)
}
HIT2<-datatransform(HIT)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
View(HIT2)
x<-5011
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
newData<-cbind(thisChoos, thisLambda)
newData
paste0(HIT2[which(HIT2$DocIDi==x)
,"DocIDj"])
updateLambdax<-function(newData, lambdax, a=1, b=1){
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
return(numerator/denominator)
}
updateLambdax(newData=newData, lambdax=lambdax)
dataReorganizer<-function(x){
lambdax<-lambda[paste0(x),"Lambda"]
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
newData<-cbind(thisChoos, thisLambda)
newData
}
dataReorganizer(5011)
library(plyr)
#toPassToC<-
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)
names(toPassToC)<-unique(lambda$DocId)
toPassToC
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5012")
