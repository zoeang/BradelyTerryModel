c(2,seq(2,10,1), 1, seq(3,10,1), 1,2, seq(4,10,1), seq(1,3,1), seq(5,10,1),
seq(1,4,1), seq(6,10,1),
seq(1,5,1), seq(7,10,1),
seq(1,6,1), seq(8,10,1),
seq(1,7,1), seq(9,10,1),
seq(1,9,1),1)
ength(c(2,seq(2,10,1), 1, seq(3,10,1), 1,2, seq(4,10,1), seq(1,3,1), seq(5,10,1),
seq(1,4,1), seq(6,10,1),
seq(1,5,1), seq(7,10,1),
seq(1,6,1), seq(8,10,1),
seq(1,7,1), seq(9,10,1),
seq(1,9,1),1))
length(c(2,seq(2,10,1), 1, seq(3,10,1), 1,2, seq(4,10,1), seq(1,3,1), seq(5,10,1),
seq(1,4,1), seq(6,10,1),
seq(1,5,1), seq(7,10,1),
seq(1,6,1), seq(8,10,1),
seq(1,7,1), seq(9,10,1),
seq(1,9,1),1))
length(c(2,seq(2,10,1), 1, seq(3,10,1), 1,2, seq(4,10,1),1, seq(1,3,1), seq(5,10,1),
1, seq(1,4,1), seq(6,10,1),
1,seq(1,5,1), seq(7,10,1),
1, seq(1,6,1), seq(8,10,1),
1, seq(1,7,1), seq(9,10,1),
1, seq(1,9,1),1))
c(2,seq(2,10,1), 1, seq(3,10,1), 1,2, seq(4,10,1),1, seq(1,3,1), seq(5,10,1),
1, seq(1,4,1), seq(6,10,1),
1,seq(1,5,1), seq(7,10,1),
1, seq(1,6,1), seq(8,10,1),
1, seq(1,7,1), seq(9,10,1),
1, seq(1,9,1),1)
length(c(2,seq(2,10,1), 1, seq(3,10,1), 1,2, seq(4,10,1),1, seq(1,3,1), seq(5,10,1),
1, seq(1,4,1), seq(6,10,1),
1,3,seq(1,5,1), seq(7,10,1),
1, 3,seq(1,6,1), seq(8,10,1),
1, 3,seq(1,7,1), seq(9,10,1),
1, 3, seq(1,9,1),1))
length(c(2,seq(2,10,1), 1, seq(3,10,1), 1,2, seq(4,10,1),1, seq(1,3,1), seq(5,10,1),
1, seq(1,4,1), seq(6,10,1),
1,3,seq(1,5,1), seq(7,10,1),
1, 3,seq(1,6,1), seq(8,10,1),
1, 3,seq(1,7,1), seq(9,10,1),
1, 3, seq(1,9,1),1), seq(2,8,1))
length(c(2,seq(2,10,1), 1, seq(3,10,1), 1,2, seq(4,10,1),1, seq(1,3,1), seq(5,10,1),
1, seq(1,4,1), seq(6,10,1),
1,3,seq(1,5,1), seq(7,10,1),
1, 3,seq(1,6,1), seq(8,10,1),
1, 3,seq(1,7,1), seq(9,10,1),
1, 3, seq(1,9,1),1, seq(2,8,1))
length(c(2,seq(2,10,1), 1, seq(3,10,1), 1,2, seq(4,10,1),1, seq(1,3,1), seq(5,10,1),
1, seq(1,4,1), seq(6,10,1),
1,3,seq(1,5,1), seq(7,10,1),
1, 3,seq(1,6,1), seq(8,10,1),
1, 3,seq(1,7,1), seq(9,10,1),
1, 3, seq(1,9,1),1, seq(2,8,1)))
c(2,seq(2,10,1), 1, seq(3,10,1), 1,2, seq(4,10,1),1, seq(1,3,1), seq(5,10,1),
1, seq(1,4,1), seq(6,10,1),
1,3,seq(1,5,1), seq(7,10,1),
1, 3,seq(1,6,1), seq(8,10,1),
1, 3,seq(1,7,1), seq(9,10,1),
1, 3, seq(1,9,1),1, seq(2,8,1))
docjdat<-c(2,seq(2,10,1), 1, seq(3,10,1), 1,2, seq(4,10,1),1, seq(1,3,1), seq(5,10,1),
1, seq(1,4,1), seq(6,10,1),
1,3,seq(1,5,1), seq(7,10,1),
1, 3,seq(1,6,1), seq(8,10,1),
1, 3,seq(1,7,1), seq(9,10,1),
1, 3, seq(1,9,1),1, seq(2,8,1))
length(rep(c(1,0,1,1,0),20))
toydata<-data.frame(sort(rep(seq(1,10),10)), docjdat, rep(c(1,0,1,1,0),20))
View(toydata)
colnames(toydata)<-c("DocIDi", "DocIDj", "Choose")
toydata
table(toydata$DocIDj)
dataset<-toydata<-data.frame(sort(rep(seq(1,10),10)), docjdat, rep(c(1,0,1,1,0),20))
lambda<-data.frame(c(10:1),.5)
colnames(lambda)<-c('DocId', 'Lambda')
bradleyterry<-function(a,b,id,lambda,dataset){
subsetdata<-dataset[dataset$DocIDi %in% id,]
newlambda<-lambda[lambda$DocId %in% id,]
sumvec<-NULL
lambdavec<-NULL
for(i in subsetdata$DocIDj){
lambdavec<-c(lambdavec,lambda$Lambda[i])
}
for (i in 1:nrow(subsetdata)){
sumunit<-(1/(newlambda$Lambda+lambdavec[i]))
sumvec<-as.vector(c(sumvec,sumunit))
}
summationterm<-sum(sumvec)
output<-(a-1+sum(subsetdata$Choose))/(b+summationterm)
return(output)
}
bradleyterry(1,1,10,lambda,dataset)
bradleyterry(0,1,10,lambda,dataset)
dataset[dataset$DocIDi %in% id,]
colnames(dataset)<-c("DocIDi", "DocIDj", "Choose")
bradleyterry<-function(a,b,id,lambda,dataset){
subsetdata<-dataset[dataset$DocIDi %in% id,]
newlambda<-lambda[lambda$DocId %in% id,]
sumvec<-NULL
lambdavec<-NULL
for(i in subsetdata$DocIDj){
lambdavec<-c(lambdavec,lambda$Lambda[i])
}
for (i in 1:nrow(subsetdata)){
sumunit<-(1/(newlambda$Lambda+lambdavec[i]))
sumvec<-as.vector(c(sumvec,sumunit))
}
summationterm<-sum(sumvec)
output<-(a-1+sum(subsetdata$Choose))/(b+summationterm)
return(output)
}
bradleyterry(1,1,10,lambda,dataset)
5/11
4/11
6/11
expect_that(bradleyterry(1,1,10,lambda,dataset), equals(6/11))
library(testthat)
expect_that(bradleyterry(1,1,10,lambda,dataset), equals(6/11))
test_that("Scalar lambda output",{
expect_that(bradleyterry(1,1,10,lambda,dataset), equals(6/11))
})
