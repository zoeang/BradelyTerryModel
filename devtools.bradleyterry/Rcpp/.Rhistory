ciy_predict(y,x,0.05,"predicted")
ciy<-function(y,x,alpha=0.05,type="fitted"){
mat<-x
modelmatrix<-cbind(1,mat)
beta <- solve(t(modelmatrix) %*% modelmatrix) %*% t(modelmatrix)%*%y
fittedvalue<-y-modelmatrix%*%beta
T1<-qt(1-alpha/2,(length(y)-ncol(modelmatrix)))
residual<-y-fittedvalue
SigmaSq <- as.vector( crossprod(residual)  / (nrow(modelmatrix)- ncol(modelmatrix)))
if(type=="fitted"){
varcov<-SigmaSq*solve(t(modelmatrix) %*% modelmatrix)
se<-sqrt(diag(varcov))
up.lim<-fittedvalue +(T1*se )
lo.lim<-fittedvalue-(T1*se )
ci<-cbind(up.lim,lo.lim)
colnames(ci)<-c("upperlimit","lowerlimit")}
if (type=="predicted"){
varcov<-SigmaSq*(1+solve(t(modelmatrix) %*% modelmatrix) )
se<-sqrt(diag(varcov))
up.lim<-fittedvalue +(T1*se )
lo.lim<-fittedvalue-(T1*se )
ci<-cbind(up.lim,lo.lim)
colnames(ci)<-c("upperlimit","lowerlimit")}
return(ci) }
y<-as.matrix(Anscombe$education)
x<-cbind(Anscombe$young,Anscombe$income)
ciy(y,x,0.05,"predicted")
Y=chicago$income
X<-chicago[,-7]
my.lm<-function(y,x,x0=NULL){
n=length(y)
vec<- rep(1,n)
mm<-as.matrix(cbind(vec, x))
k=ncol(mm)
beta<-solve(crossprod(mm)) %*%t(mm)%*%y
y.hat<-mm%*%beta
resid<-y-y.hat
sigma.hat<-crossprod(resid)/(n-k)
var<- as.vector(sigma.hat) * solve(crossprod(mm))
if (length(x0)==0) {
return(list(beta,resid,var))
} else {
var.yhat<- as.vector(sigma.hat)%*% t(x0) %*% solve(crossprod(mm))%*% x0
var.pred<- as.vector(sigma.hat) %*% (1+ t(x0) %*% solve(crossprod(mm))%*% x0)
sqrt.var<-sqrt(as.vector(var.yhat))
sqrt.pred<-sqrt(as.vector(var.pred))
CI.fitted<-(x0 %*% beta + c(-1,1) * (qt(.975, 40)) %*% sqrt.var)
CI.predicted<-(x0 %*% beta + c(-1,1) * (qt(.975, 40)) %*% sqrt.pred)
fin<-list(beta,resid, fitted.y, var, CI.fitted, CI.predicted)
return(fin)
}
}
my.lm(Y,X,0)
Y=chicago$income
X<-chicago[,-7]
chicago
y<-as.matrix(Anscombe$education)
x<-cbind(Anscombe$young,Anscombe$income)
my.lm(y,x,0)
my.lm(y,x,0)
my.lm(y,x)
setClass(Class="Simpson",
representation = representation(
result = "numeric",
x="numeric",
y="numeric"
),
prototype = prototype(
result =  c(),
x= c(),
y= c())
)
# Define UI for dataset viewer app ----
library(EBMAforecast)
data("presidentialForecast")
attach(presidentialForecast)
presidentialForecast$years<- seq(1952, 2008, 4)
ui <- fluidPage(
headerPanel("Presidential Forecasts"),
# App title ----
titlePanel("Results of presidential forecasts from 1952-2008"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput("variable", "Projection type:",
c("None" = NULL,
"Campbell"="Campbell",
"Hibbs"="Hibbs",
"Fair"="Fair",
"EWT2C2"="EWT2C2",
"Abramowitz"="Abramowitz")),
sliderInput("range", label="Observed Years",
min=min(presidentialForecast$years),
max=max(presidentialForecast$years),
value=c(1952, 2008), step=4)
# Input: Numeric entry for number of obs to view ----
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for caption ----
h3(textOutput("caption")),
# Output: ----
plotOutput("forecastPlot", click="plot_click"),
verbatimTextOutput("info")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$presidentialForecast,
"Campbell" = Campbell,
"Hibbs" = Hibbs,
"Fair" = Fair)
})
formulaText <- reactive({
paste("Yearly forecast according to", input$presidentialForecast)
})
# Generate a summary of the dataset ----
output$forecastPlot <- renderPlot({
plot(presidentialForecast$years, ylim=c(40,66), presidentialForecast[,input$variable], xlab="Year", ylab="Presidential Vote Share", "l", col=rgb(51/255, 153/255, 102/255), lty=2)
lines(presidentialForecast$years, presidentialForecast$Actual)
legend("topright", legend=c("Predicted Resutl", "Actual Result"), col=c(rgb(51/255, 153/255, 102/255), "black"), lty=c(2,1), cex=0.8)
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)})
})}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
as.matrix(presidentialForecast)
library(shinyApp)
library(shiny)
library(EBMAforecast)
data("presidentialForecast")
attach(presidentialForecast)
presidentialForecast$years<- seq(1952, 2008, 4)
ui <- fluidPage(
headerPanel("Presidential Forecasts"),
# App title ----
titlePanel("Results of presidential forecasts from 1952-2008"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput("variable", "Projection type:",
c("None" = NULL,
"Campbell"="Campbell",
"Hibbs"="Hibbs",
"Fair"="Fair",
"EWT2C2"="EWT2C2",
"Abramowitz"="Abramowitz")),
sliderInput("range", label="Observed Years",
min=min(presidentialForecast$years),
max=max(presidentialForecast$years),
value=c(1952, 2008), step=4)
# Input: Numeric entry for number of obs to view ----
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for caption ----
h3(textOutput("caption")),
# Output: ----
plotOutput("forecastPlot", click="plot_click"),
verbatimTextOutput("info")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$presidentialForecast,
"Campbell" = Campbell,
"Hibbs" = Hibbs,
"Fair" = Fair)
})
formulaText <- reactive({
paste("Yearly forecast according to", input$presidentialForecast)
})
# Generate a summary of the dataset ----
output$forecastPlot <- renderPlot({
plot(presidentialForecast$years, ylim=c(40,66), presidentialForecast[,input$variable], xlab="Year", ylab="Presidential Vote Share", "l", col=rgb(51/255, 153/255, 102/255), lty=2)
lines(presidentialForecast$years, presidentialForecast$Actual)
legend("topright", legend=c("Predicted Resutl", "Actual Result"), col=c(rgb(51/255, 153/255, 102/255), "black"), lty=c(2,1), cex=0.8)
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)})
})}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runExample("03_reactivity") # a reactive expression
min(presidentialForecast$years)
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("05_sliders") # slider bars
library(shiny)
library(EBMAforecast)
data("presidentialForecast")
attach(presidentialForecast)
presidentialForecast$years<- seq(1952, 2008, 4)
ui <- fluidPage(
headerPanel("Presidential Forecasts"),
# App title ----
titlePanel("Results of presidential forecasts from 1952-2008"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput("variable", "Projection type:",
c("None" = NULL,
"Campbell"="Campbell",
"Hibbs"="Hibbs",
"Fair"="Fair",
"EWT2C2"="EWT2C2",
"Abramowitz"="Abramowitz")),
sliderInput("range", label="Observed Years",
min=min(1952),
max=max(2008),
value=c(1952, 2008), step=4)
# Input: Numeric entry for number of obs to view ----
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for caption ----
h3(textOutput("caption")),
# Output: ----
plotOutput("forecastPlot", click="plot_click"),
verbatimTextOutput("info")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$presidentialForecast,
"Campbell" = Campbell,
"Hibbs" = Hibbs,
"Fair" = Fair)
})
formulaText <- reactive({
paste("Yearly forecast according to", input$presidentialForecast)
})
# Generate a summary of the dataset ----
output$forecastPlot <- renderPlot({
plot(presidentialForecast$years, ylim=c(40,66), presidentialForecast[,input$variable], xlab="Year", ylab="Presidential Vote Share", "l", col=rgb(51/255, 153/255, 102/255), lty=2)
lines(presidentialForecast$years, presidentialForecast$Actual)
legend("topright", legend=c("Predicted Resutl", "Actual Result"), col=c(rgb(51/255, 153/255, 102/255), "black"), lty=c(2,1), cex=0.8)
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)})
})}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runExample("05_sliders") # slider bars
runExample("06_tabsets") # tabbed panels
runExample("08_html") # Shiny app built from HTML
runExample("11_timer") # an automated timer
runExample("07_widgets") # help text and submit buttons
runExample("06_tabsets") # tabbed panels
library(EBMAforecast)
data("presidentialForecast")
attach(presidentialForecast)
presidentialForecast$years<- seq(1952, 2008, 4)
ui <- fluidPage(
headerPanel("Presidential Forecasts"),
# App title ----
titlePanel("Results of presidential forecasts from 1952-2008"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput("variable", "Projection type:",
c("None" = NULL,
"Campbell"="Campbell",
"Hibbs"="Hibbs",
"Fair"="Fair",
"EWT2C2"="EWT2C2",
"Abramowitz"="Abramowitz")),
sliderInput("range", label="Observed Years",
min=min(1952),
max=max(2008),
value=c(1952, 2008), step=4)
# Input: Numeric entry for number of obs to view ----
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for caption ----
h3(textOutput("caption")),
# Output: ----
plotOutput("forecastPlot", click="plot_click"),
verbatimTextOutput("info")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$presidentialForecast,
"Campbell" = Campbell,
"Hibbs" = Hibbs,
"Fair" = Fair)
})
formulaText <- reactive({
paste("Yearly forecast according to", input$presidentialForecast)
})
# Generate a summary of the dataset ----
output$forecastPlot <- renderPlot({
plot(presidentialForecast$years, ylim=c(40,66), presidentialForecast[,input$variable], xlab="Year", ylab="Presidential Vote Share", "l", col="red", lty=2)
lines(presidentialForecast$years, presidentialForecast$Actual)
legend("topright", legend=c("Predicted Resutl", "Actual Result"), col="red", "black"), lty=c(2,1), cex=0.8)
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)})
})}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
as.matrix(presidentialForecast)
library(shiny)
library(EBMAforecast)
data("presidentialForecast")
attach(presidentialForecast)
presidentialForecast$years<- seq(1952, 2008, 4)
ui <- fluidPage(
headerPanel("Presidential Forecasts"),
# App title ----
titlePanel("Results of presidential forecasts from 1952-2008"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput("variable", "Projection type:",
c("None" = NULL,
"Campbell"="Campbell",
"Hibbs"="Hibbs",
"Fair"="Fair",
"EWT2C2"="EWT2C2",
"Abramowitz"="Abramowitz")),
sliderInput("range", label="Observed Years",
min=min(1952),
max=max(2008),
value=c(1952, 2008), step=4)
# Input: Numeric entry for number of obs to view ----
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for caption ----
h3(textOutput("caption")),
# Output: ----
plotOutput("forecastPlot", click="plot_click"),
verbatimTextOutput("info")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$presidentialForecast,
"Campbell" = Campbell,
"Hibbs" = Hibbs,
"Fair" = Fair)
})
formulaText <- reactive({
paste("Yearly forecast according to", input$presidentialForecast)
})
# Generate a summary of the dataset ----
output$forecastPlot <- renderPlot({
plot(presidentialForecast$years, ylim=c(40,66), presidentialForecast[,input$variable], xlab="Year", ylab="Presidential Vote Share", "l", col="red", lty=2)
lines(presidentialForecast$years, presidentialForecast$Actual)
legend("topright", legend=c("Predicted Resutl", "Actual Result"), col="red", "black"), lty=c(2,1), cex=0.8)
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)})
})}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
as.matrix(presidentialForecast)
library(EBMAforecast)
data("presidentialForecast")
attach(presidentialForecast)
presidentialForecast$years<- seq(1952, 2008, 4)
ui <- fluidPage(
headerPanel("Presidential Forecasts"),
# App title ----
titlePanel("Results of presidential forecasts from 1952-2008"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput("variable", "Projection type:",
c("None" = NULL,
"Campbell"="Campbell",
"Hibbs"="Hibbs",
"Fair"="Fair",
"EWT2C2"="EWT2C2",
"Abramowitz"="Abramowitz")),
sliderInput("range", label="Observed Years",
min=min(presidentialForecast$years),
max=max(presidentialForecast$years),
value=c(1952, 2008), step=4)
# Input: Numeric entry for number of obs to view ----
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for caption ----
h3(textOutput("caption")),
# Output: ----
plotOutput("forecastPlot", click="plot_click"),
verbatimTextOutput("info")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$presidentialForecast,
"Campbell" = Campbell,
"Hibbs" = Hibbs,
"Fair" = Fair)
})
formulaText <- reactive({
paste("Yearly forecast according to", input$presidentialForecast)
})
# Generate a summary of the dataset ----
output$forecastPlot <- renderPlot({
plot(presidentialForecast$years, ylim=c(40,66), presidentialForecast[,input$variable], xlab="Year", ylab="Presidential Vote Share", "l", col=rgb(51/255, 153/255, 102/255), lty=2)
lines(presidentialForecast$years, presidentialForecast$Actual)
legend("topright", legend=c("Predicted Resutl", "Actual Result"), col=c(rgb(51/255, 153/255, 102/255), "black"), lty=c(2,1), cex=0.8)
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)})
})}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(EBMAforecast)
data("presidentialForecast")
attach(presidentialForecast)
presidentialForecast$years<- seq(1952, 2008, 4)
ui <- fluidPage(
headerPanel("Presidential Forecasts"),
# App title ----
titlePanel("Results of presidential forecasts from 1952-2008"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput("variable", "Projection type:",
c("None" = NULL,
"Campbell"="Campbell",
"Hibbs"="Hibbs",
"Fair"="Fair",
"EWT2C2"="EWT2C2",
"Abramowitz"="Abramowitz")),
sliderInput("range", label="Observed Years",
min=min(1952),
max=max(2008),
value=c(1952, 2008), step=4)
# Input: Numeric entry for number of obs to view ----
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for caption ----
h3(textOutput("caption")),
# Output: ----
plotOutput("forecastPlot", click="plot_click"),
verbatimTextOutput("info")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$presidentialForecast,
"Campbell" = Campbell,
"Hibbs" = Hibbs,
"Fair" = Fair)
})
formulaText <- reactive({
paste("Yearly forecast according to", input$presidentialForecast)
})
# Generate a summary of the dataset ----
output$forecastPlot <- renderPlot({
plot(presidentialForecast$years, ylim=c(40,66), presidentialForecast[,input$variable], xlab="Year", ylab="Presidential Vote Share", "l", col="red", lty=2)
lines(presidentialForecast$years, presidentialForecast$Actual)
legend("topright", legend=c("Predicted Result", "Actual Result"), col=c("red", "black"), lty=c(2,1), cex=0.8)
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)})
})}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel")
library(Rcpp)
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel")
sourceCPP("rcpp_brad.cpp")
sourceCpp("rcpp_brad.cpp")
library(Rcpp)
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel")
sourceCpp("rcpp_brad.cpp")
sourceCpp("rcpp_brad2.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
sourceCpp("bradleyterry.cpp")
library(tidyr)
library(table4)
install.packages(table4)
