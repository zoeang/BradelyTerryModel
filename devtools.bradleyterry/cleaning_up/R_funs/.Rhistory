<<<<<<< HEAD
}
lambda1<-bradleyterry.multid(1,0,id=c(3,4), lambda, dataset) #run the code above for one doc id, a number of times determined by user
lambda1
lambda
iterative.bt(1,0,id,lambda,dataset,50)
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = c(1-prob, prob))#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
class(dataset)
class(lambda)
library(plyr)
ddply(.data=dataset, .variables=c("DocIDi", "DocIDj"), .fun=bradleyterry(a,b,id,lambda,dataset))
ddply(.data=dataset, .variables=c("DocIDi", "DocIDj"), .fun=bradleyterry(1,0,id=(3,4),lambda,dataset))
ddply(.data=dataset, .variables=c("DocIDi", "DocIDj"), .fun=bradleyterry(1,0,id=c(3,4),lambda,dataset))
bradleyterry<-function(a,b,id,lambda,dataset){
subsetdata<-dataset[dataset$DocIDi %in% id,]#this subsets the dataset down to just the observations with the id that we are looking at
newlambda<-lambda[lambda$DocId %in% id,]#this extracts the specific DocID and lambda value we want to upgrade for the purpose of the equation
sumvec<-NULL #create null vectors to store our sum elements
lambdavec<-NULL #create null vector to extract the lambda elements we want
for(i in 1:nrow(subsetdata)){ #the purpose of thsi loop is to extract lambda j values for use in the next loop
lambdajsubset<-lambda[lambda$DocId %in% subsetdata$DocIDj[i],] #This picks out the lambda j values for each of the elements of the subset dataset
lambdavec<-c(lambdavec,lambdajsubset$Lambda) #this building the vector for use
}
for (i in 1:nrow(subsetdata)){
sumunit<-(1/(newlambda$Lambda+lambdavec[i])) #This creates the summation term unit by unit with the lambda i value and all of the respective lambda js
sumvec<-as.vector(c(sumvec,sumunit)) #this makes a vector of the summation terms
}
summationterm<-sum(sumvec) #here we sum the terms of the vector to plug into the equation
output<-(a-1+sum(subsetdata$Choose))/(b+summationterm) #this is where we finish up the equation and plug in all of our respective parts
return(output)
}
ddply(.data=dataset, .variables=c("DocIDi", "DocIDj"), .fun=bradleyterry(1,0,1,lambda,dataset))
head(dataset)
uniqueDocID<-c(unique(HIT[,2]),unique(HIT[,1]))
set.seed(13)
lambdaDocIDj<-round(runif(uniqueDocID),3)
HIT<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/exampleHITs.csv", header=T)
colnames(HIT)<-c("DocIDi", "DocIDj", "Choose")
uniqueDocID<-c(unique(HIT[,2]),unique(HIT[,1]))
set.seed(13)
lambdaDocID<-round(runif(uniqueDocID),3)
lambda<-data.frame(uniqueDocID, lambda.value)
lambda.value<-round(runif(uniqueDocID),3)
set.seed(13)
lambda.value<-round(runif(uniqueDocID),3)
lambda<-data.frame(uniqueDocID, lambda.value)
colnames(lambda)<-c('DocId', 'Lambda')
head(lambda)
uniqueDocID<-c(unique(HIT[,1]),unique(HIT[,2]))
set.seed(13)
lambda.value<-round(runif(uniqueDocID),3)
lambda<-data.frame(uniqueDocID, lambda.value)
colnames(lambda)<-c('DocId', 'Lambda')
head(lambda)
lambda.df<-data.frame(uniqueDocID, lambda.value)
colnames(lambda.df)<-c('DocId', 'Lambda')
head(lambda) #check it out
head(HIT)
HIT.meta<-as.data.frame(cbind(HIT$DocIDj, HIT$DocIDi, HIT$Choose2))
head(HIT.meta)
for(i in 1:nrow(HIT)){
if(HIT$Choose[i]==0){
HIT$Choose2[i]=1
} else if(HIT$Choose[i]==1){
HIT$Choose2[i]=0
}
}
HIT.meta<-as.data.frame(cbind(HIT$DocIDj, HIT$DocIDi, HIT$Choose2))
head(HIT.meta)
colnames(HIT.meta)<-c("DocIDi", "DocIDj", "Choose")
colnames(HIT.meta)<-c("DocIDi", "DocIDj", "Choose")
head(HIT.meta,2)
HIT2<-as.data.frame(cbind(HIT$DocIDj, HIT$DocIDi, HIT$Choose2)) #HIT where j is compared to i
colnames(HIT2)<-c("DocIDi", "DocIDj", "Choose")
head(HIT2)# take a look
HIT<-HIT[,-4] #remove the "Choose2" column
metaHIT<-rbind(HIT, HIT2)
head(metaHIT)
tail(metaHIT)
metaHIT[c(501:506), ]
head(metaHIT)
metaHIT[c(501:506), ]
head(HIT)
head(newHIT)
newHIT<-as.data.frame(cbind(HIT$DocIDi,HIT$DocIDj,HIT$Choose))
colnames(newHIT)<-c("DocIDi", "DocIDj", "chosen")
head(newHIT)
for(i in 1:nrow(newHIT)){
if(newHIT$chosen[i]==0){
newHIT$chosen2[i]=1
} else if(newHIT$chosen[i]==1){
newHIT$chosen2[i]=0
}
}
sum(newHIT$chosen==newHIT$chosen2)
newHIT<-newHIT[,-4] #remove inverse row of chosen2
colnames(newHIT)<-c("DocIDi", "DocIDj", "Choose")
newHIT2<-as.data.frame(cbind(newHIT$DocIDj, newHIT$DocIDi, newHIT$chosen2))
colnames(newHIT2)<-c("DocIDi", "DocIDj", "Choose")
metaHIT1<-rbind(newHIT, newHIT2)
head(lambda.df) #check it out
id<-unique(HIT$DocIDi)
lambda<-data.frame(c(10:1),runif(10))
colnames(lambda)<-c('DocId', 'Lambda')
HIT$lambda<-runif(nrow(HIT))
head(HIT)
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
datatransform<-function(HIT){
vec<-rep(1:2, 1500)
HIT<-cbind(HIT,vec)
HIT<-as.data.frame((HIT))
colnames(HIT)<-c("comparison_id" ,"document_id", "result","num")
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==2){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==1){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT2<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
metaHIT<-rbind(newHIT,newHIT2)
return(metaHIT)
}
HIT2<-datatransform(HIT)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
data.generation<-function(lambda,n){ #n size dataset
output.lambda<-NULL #creates a template for the output dataset
for (i in 1:n){#this is a for loop for creating data points, n size dataset
lams<-sample(lambda$DocId, 2)#this randomly selects two of the lambdas at random
lambdavec<-NULL #creates a templace for extracting the lambda values
for (i in lams){
lambdavec<-c(lambdavec,lambda$Lambda[i]) #this actually extracts the lambdas
}
prob<-lambdavec[1]/(lambdavec[1]+lambdavec[2]) #this uses the lambdas in order to create a probability for selection
Choose <- sample(c(0,1), 1, replace = TRUE, prob = c(1-prob, prob))#this chooses the document with the predetermined probability
new.lambda<-cbind(lams[1],lams[2],Choose) #now building our output
output.lambda<-rbind(output.lambda, new.lambda)#row binding with the template
}
rownames(output.lambda)<-NULL #getting rid of the numbers for row name
output.lambda<-as.data.frame(output.lambda) #we do this because removing our row names made a sort of matrix
colnames(output.lambda)<-c("DocIDi","DocIDj","Choose") #Making the output like our dataset
return(output.lambda) #outputs our data
}
dataset<-data.generation(lambda,500)
datatrans<-function(docid,dat){
outputlist<-NULL
outputlist<-as.list(outputlist)
for (i in docid){
outputlist[[i]]<-dat[dat$DocIDi %in% i,]
}
return(outputlist)
}
test1<-datatrans(DocId,HIT2)
test1[[5000]]
lambdatrans<-function(docid,lambda){
lambdalist<-NULL
lambdalist<-as.list(lambdalist)
for (i in docid){
lambdalist[[i]]<-lambda[lambda$DocId %in% i,]
}
return(lambdalist)
}
test2<-lambdatrans(DocId,lambda)
test2[[4990]][,2]
test1
test1[[1]]
test1[[4910]]
test1[[4990]]
test1[[4990]][1]
test1[[4990]][2]
HIT2
which(HIT2$DocIDi==x)
HIT2$DocIDi
HIT2$DocIDi==5011
x<-5011
which(HIT2$DocIDi==x)
which(HIT2$DocIDi==x | HIT@$DocIDj==x)
which(HIT2$DocIDi==x | HIT$DocIDj==x)
which(HIT2$DocIDi==x)
HIT2[which(HIT2$DocIDi==x),]
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
lambda1
lambda
rownames(lambda)<-lambda$DocID
lambda
rownames(lambda)<-lambda$DocId
lambda
thisChoos<-HIT2[which(HIT2$DocIDi==x),]
HIT2[which(HIT2$DocIDi==x),]
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
HIT2[which(HIT2$DocIDi==x),]
HIT2[which(HIT2$DocIDi==x),"DocIDj"]
lambda[HIT2[which(HIT2$DocIDi==x),"DocIDj"],]
lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
newData<-cbind(thisChoos, thisLambda)
newData
lambdax<-lambda[paste0(x),]
lambdax
lambdax<-lambda[paste0(x),"Lambda"]
lambdax
b=1
lambdax+newData$Lambda
sum(1/lambdax+newData$Lambda))
sum(1/(lambdax+newData$Lambda))
updateLambdax<-function(newData, lambdax, a=1, b=1){
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
}
updateLambdax(newData=newData, lambdax=lambdax)
updateLambdax<-function(newData, lambdax, a=1, b=1){
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
return(numerator/denominator)
}
updateLambdax(newData=newData, lambdax=lambdax)
dataReorganizer<-function(x){
lambdax<-lambda[paste0(x),"Lambda"]
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
newData<-cbind(thisChoos, thisLambda)
newData
}
dataReorganizer(4991)
unique(lambda$DocId)
library(plyr)
toPassToC<-lapply(unique(lambda$DocId), dataReorganizer)
dim(toPassToC)
toPassToC<-
lapply(unique(lambda$DocId), dataReorganizer)
lapply(unique(lambda$DocId), dataReorganizer)
laply(unique(lambda$DocId), dataReorganizer)
dim(toPassToC)
sapply(unique(lambda$DocId), dataReorganizer)
lapply(unique(lambda$DocId), dataReorganizer)
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)
names(toPassToC)
names(toPassToC)<-unique(lambda$DocId)
lambda
updateLambdax<-function(allData, thisName, a=1, b=1){
lambdax<-thisName
newData<-allData[[thisName]]
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
return(numerator/denominator)
}
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
newData<-cbind(thisChoos, thisLambda)
newData
updateLambdax<-function(newData, lambdax, a=1, b=1){
=======
#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
#this should stay in R; rename the function and objects
dataReorganizer<-function(x){ #this is a function that does line 235-241 for a specified DocID
lambdax<-lambda[paste0(x),"Lambda"]
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
#
newData<-cbind(thisChoos, thisLambda)
newData
}
dataReorganizer(4969) #organizes the DF for x, the DocID
#this needs to be in rcpp
#updates one docId, which corresponds with lambdax
updateLambdax<-function(newData, lambdax, a=1, b=1){ #lambdax is the lmabda of DocIDx (5011); DataFrame, double, int, int
>>>>>>> 6e6d8404c523b33267c7316f17d73413caab0212
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
return(numerator/denominator)
}
updateLambdax(newData=newData, lambdax=lambdax)
<<<<<<< HEAD
updateLambdax(allData=toPassToC, thisName="5011")
updateLambdax2<-function(allData, thisName, a=1, b=1){
lambdax<-thisName
newData<-allData[[thisName]]
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
return(numerator/denominator)
}
updateLambdax2(allData=toPassToC, thisName=)
updateLambdax2(allData=toPassToC, thisName="5011")
lambda
lambda$Lambda[thisName]
lambda$Lambda["5011"]
lambda$Lambda
lambda["5011", "Lambda"]
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){
lambdax<-lambda["5011", "Lambda"]
newData<-allData[[thisName]]
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
return(numerator/denominator)
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5011")
sapply(paste0(unique(lambda$DocId)), Fun=updateLambdax2, lambda=lambda, allData= toPassToC )
sapply(paste0(unique(lambda$DocId)), FUN=updateLambdax2, lambda=lambda, allData= toPassToC )
dataReorganizer(5011)
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)
names(toPassToC)<-unique(lambda$DocId)
toPassToC[["4969"]]
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
return(numerator/denominator)
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5011")
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5012")
sapply(paste0(unique(lambda$DocId)), FUN=updateLambdax2, lambda=lambda, allData= toPassToC )
rm(list=ls())
#read in data
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
head(dat)
HIT<-dat[,3:5]
#data transformation; allows us to calculate posterior lambdas for DocIs and DocJs; this only needs to be run once, so I'm not rewriting it
datatransform<-function(HIT){
vec<-rep(1:2, 1500)
HIT<-as.data.frame(cbind(HIT,vec))
colnames(HIT)<-c("comparison_id" ,"document_id", "result","num")
DocIDi<-NULL
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){ #create a vector of DocIDj composed of every other document_id, the document to which the document of interest of compared
if (HIT$num[i]==2){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i]) #create a vector of DocIDi composed every other document id, the document of interest
Choose<-c(Choose,HIT$result[i]) #1 indicates that the document of interest won; 0 indicates that the document of interest lost
}
}
newHIT<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
DocIDi<-NULL #repeat the same process, but reverse the order of comparison; this ultimately allows us to update all lambdas
DocIDj<-NULL
Choose<-NULL
for (i in 1:nrow(HIT)){
if (HIT$num[i]==1){
DocIDj<-c(DocIDj,HIT$document_id[i])
}
else{
DocIDi<-c(DocIDi,HIT$document_id[i])
Choose<-c(Choose,HIT$result[i])
}
}
newHIT2<-as.data.frame(cbind(DocIDi,DocIDj,Choose))
metaHIT<-rbind(newHIT,newHIT2)
return(metaHIT)
}
HIT2<-datatransform(HIT)
DocId<-sort(unique(HIT$document_id), decreasing=F)
set.seed(42)
lambda<- as.data.frame(cbind(DocId, runif(50)))
colnames(lambda)<-c("DocIDj", "Lambda")
library(csp)
colnames(csp)
library(dplyr)
library(tidyr)
head(variables)
csp[1,]
csp$elect_year
df <- subset(csp, variable == "elect_year")
df$value <- as.numeric(df$value)
head(df)
View(df)
rm(list=ls())
###### In R only. Old code ########
###################################
#Data Generation===============================================================
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwed('C:\Users\zoeja\OneDrive\Documents\Spring2018\R\BradelyTerryModel\devtools.bradleyterry\cleaning_up\R_funs')
setwd('C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs')
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
lambda<-cbind(DocId,runif(50))
=======
#make this function (toPasstoC) in rcpp
library(plyr)
#toPassToC<-
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5012")
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
#this function will b in R but call on a C function; see line 253
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="4969")
lambdax<-lambda[lambda, "Lambda"]
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
names(toPassToC)
#this function will b in R but call on a C function; see line 253
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="4969")
toPassToC
## Update all Lambdas
ob<-sapply(paste0(unique(lambda$DocId)), FUN=updateLambdax2, lambda=lambda, allData= toPassToC )
class(ob)
updateLambdax(newData=newData, lambdax=lambdax)
plot(log(recovered$Lambda),comparison$Lambda)
ob
HIT3<- merge(HIT2, lambda, by="DocIDj")
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3<- merge(HIT2, lambda, by="DocIDj")
getlambda(lambda, DocId) #taking lambda for matching DocId
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
#this is same as "bradleyterry" in R.
posteriorlambda(HIT3, lambda$Lambda[1], 1,1)
HIT3
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
lambda<- as.data.frame(cbind(DocId, runif(50)))
lambda
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
>>>>>>> 6e6d8404c523b33267c7316f17d73413caab0212
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
<<<<<<< HEAD
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
source("com_bradley.R")
#Give updated lambda: just one lambda for one id
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
#Give updated lambda: just one lambda for one id
bradleyterry(a=1,b=1,id='4969',lambda,HIT2)
bradleyterry.multid(a=1,b=1, id=DocId, lambda, HIT2)
rm(list=ls())
###### In R only. Old code ########
###################################
#Data Generation===============================================================
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd('C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs')
=======
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
DocId<-sort(unique(HIT$document_id), decreasing=F)
HIT2<-datatransform(HIT)
HIT2
colnames(lambda)<-c("DocIDj", "Lambda")
lambda
HIT3<- merge(HIT2, lambda, by="DocIDj")
HIT3
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
lambda<- as.data.frame(cbind(DocId, runif(50))) #lambda values are random
lambda
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
lambda2<- as.data.frame(cbind(DocId, runif(50))) #lambda values are random
lambda2<- as.data.frame(cbind(DocId, runif(50))) #lambda values are random
lambda2
DocId<-sort(unique(HIT$document_id), decreasing=F)
HIT2<-datatransform(HIT)
#lambda2<- as.data.frame(cbind(DocId, runif(50))) #lambda values are random
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3<- merge(HIT2, lambda, by="DocIDj")
HIT3
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
>>>>>>> 6e6d8404c523b33267c7316f17d73413caab0212
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
<<<<<<< HEAD
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
source("com_bradley.R")
#Give updated lambda: just one lambda for one id
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
#' toydata2<-toydata2[,-4]
#' lambda<-data.frame(c(1:10),runif(10))
#' colnames(lambda)<-c('DocId', 'Lambda')
#'
#'
#' bradleyterry(1,1,1,lambda,toydata2)
#'
#' @rdname bradleyterry
#' @aliases bradleyterry, ANY-method
#' @export
bradleyterry<-function(a,b,id,lambda,dataset){
browser()
subsetdata<-dataset[dataset$DocIDi %in% id,]#this subsets the dataset down to just the observations with the id that we are looking at
newlambda<-lambda[lambda$DocId %in% id,]#this extratcs the specific lambda amount we want to upgrade for the purpose of the equation
sumvec<-NULL #create null vectors to store our sum elements
lambdavec<-NULL #create null vector to extract the lambda elements we want
for(i in 1:length(subsetdata$DocIDj)){ #the purpose of thsi loop is to extract lambda j values for use in the next loop
lambdajsubset<-lambda[lambda$DocId %in% subsetdata$DocIDj[i],] #This picks out the lambda j values for each of the elements of the subset dataset
lambdavec<-c(lambdavec,lambdajsubset$Lambda) #this building the vector for use
}
for (i in 1:nrow(subsetdata)){
sumunit<-(1/(newlambda$Lambda+lambdavec[i])) #This creates the summation term unit by unit with the lambda i value and all of the respective lambda js
sumvec<-as.vector(c(sumvec,sumunit)) #this makes a vector of the summation terms
}
summationterm<-sum(sumvec) #here we sum the terms of the vector to plug into the equation
output<-(a-1+sum(subsetdata$Choose))/(b+summationterm) #this is where we finish up the equation and plug in all of our respective parts
return(output)
}
#Give updated lambda: just one lambda for one id
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
bradleyterry.multid(a=1,b=1, id=DocId, lambda, HIT2)
source("com_bradley.R")
#Give updated lambda: just one lambda for one id
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
source("com_bradley.R")
#Give updated lambda: just one lambda for one id
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
# this is the lambda I'm updating right now
x<-5011
=======
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3<- merge(HIT2, lambda, by="DocIDj")
HIT3
lambda
HIT3
View(HIT3)
HIT3$DocIDj=="4969"
HIT3$DocIDj["4969"]
HIT3$DocIDj[1]
HIT3$[1]
HIT3$Lambda[1]
lambda
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
source("com_bradley.R")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("com_bradley.R")
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
colnames(lambda)<-c("DocIDj", "Lambda")
lambda
HIT3<- merge(HIT2, lambda, by="DocIDj")
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
lambda$Lambda[1]
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
HIT3
lambda
lambda2<-colname(lambda)<-c("DocId","Lambda")
lambda2<-colnames(lambda)<-c("DocId","Lambda")
bradleyterry(a=1,b=1,id=4969,lambda2,HIT2)
lambda2
lambda
colnames(lambda)<-c("DocId","Lambda")
lambda
bradleyterry(a=1,b=1,id=4969,lambda2,HIT2)
colnames(lambda)<-c("DocId","Lambda")
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3
colnames(lambda)<-c("DocId","Lambda")
x<-4969  #if you want to change doc id (for instance, 4969), just change all 5011 to 4969.
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
rownames(lambda)<-lambda$DocId #rename each row the the DocID; the row names are strings/ characters
lambdax<-lambda[paste0(x),"Lambda"]
lambdax
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
thisLambda
newData
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
dataReorganizer<-function(x){ #this is a function that does line 235-241 for a specified DocID
lambdax<-lambda[paste0(x),"Lambda"]
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
#
newData<-cbind(thisChoos, thisLambda)
newData
}
dataReorganizer(4969) #organizes the DF for x, the DocID
dataReorganizer(4969)
new<-dataReorganizer(4969)
posteriorlambda(new, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
View(new)
View(HIT3)
View(new)
Rcpp::sourceCpp("post_lambda.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("post_lambda.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("post_lambda.cpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("post_lambda.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("post_lambda.cpp")
getlambda(lambda, DocId) #taking lambda for matching DocId
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
Rcpp::sourceCpp("post_lambda.cpp")
Rcpp::sourceCpp("post_lambda.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
new<-dataReorganizer(4969)
new
posteriorlambda(new, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
new<-dataReorganizer(4969)
posteriorlambda(new, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
new
dataReorganizer(4969)
newData
posteriorlambda(newData, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("datatransform.R") #use only once
HIT2<-datatransform(HIT)
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
Rcpp::sourceCpp("post_lambda.cpp")
getlambda(lambda, DocId) #taking lambda for matching DocId
colnames(lambda)<-c("DocIDj", "Lambda")
getlambda(lambda, DocId) #taking lambda for matching DocId
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
posteriorlambda(newData, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
x<-4969  #if you want to change doc id (for instance, 4969), just change all 5011 to 4969.
>>>>>>> 6e6d8404c523b33267c7316f17d73413caab0212
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
rownames(lambda)<-lambda$DocId #rename each row the the DocID; the row names are strings/ characters
lambdax<-lambda[paste0(x),"Lambda"] #get the lambda value of x=5011
<<<<<<< HEAD
=======
#same thing as ^ doc.x.lambda<-lambda[paste0(x),"Lambda"] # the prior lambda value of doc x
lambdax
>>>>>>> 6e6d8404c523b33267c7316f17d73413caab0212
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
<<<<<<< HEAD
#this should stay in R; rename the function and objects
=======
x<-4969  #if you want to change doc id (for instance, 4969), just change all 5011 to 4969.
rownames(lambda)<-lambda$DocIdj
lambdax<-lambda[paste0(x),"Lambda"]
rownames(lambda)<-lambda$DocIdj #rename each row the the DocID; the row names are strings/ characters
lambdax<-lambda[paste0(x),"Lambda"] #get the lambda value of x=5011
#same thing as ^ doc.x.lambda<-lambda[paste0(x),"Lambda"] # the prior lambda value of doc x
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
x<-4969  #if you want to change doc id (for instance, 4969), just change all 5011 to 4969.
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
rownames(lambda)<-lambda$DocIdj #rename each row the the DocID; the row names are strings/ characters
lambdax<-lambda[paste0(x),"Lambda"] #get the lambda value of x=5011
#same thing as ^ doc.x.lambda<-lambda[paste0(x),"Lambda"] # the prior lambda value of doc x
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
rownames(lambda)<-lambda$DocId #rename each row the the DocID; the row names are strings/ characters
lambdax<-lambda[paste0(x),"Lambda"] #get the lambda value of x=5011
#same thing as ^ doc.x.lambda<-lambda[paste0(x),"Lambda"] # the prior lambda value of doc x
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
class(newData)
posteriorlambda(newData, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
lambda$Lambda[1]
newData
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3<- merge(HIT2, lambda, by="DocIDj")
HIT3
View(newData)
lambda$Lambda[1]
newData
newData[1]
thisChoos
thisLambda
lambdax
rownames(lambda)<-lambda$DocId
thisChoos
newData
c(newData$thisChoos,newData$DocId,newData$Lambda)
cbind(newData$thisChoos,newData$DocId,newData$Lambda)
colnames(newnew)<-c("thisChoos","DocId","Lambda")
newnew<-cbind(newData$thisChoos,newData$DocId,newData$Lambda)
colnames(newnew)<-c("thisChoos","DocId","Lambda")
newnew
posteriorlambda(newData, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
View(HIT3)
newnew<-as.data.frame(cbind(newData$thisChoos,newData$DocId,newData$Lambda))
colnames(newnew)<-c("thisChoos","DocId","Lambda")
posteriorlambda(newData, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
newnew
newData
Rcpp::sourceCpp("posteriorlambda.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
View(HIT3)
View(HIT2)
View(lambda)
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
source("com_bradley.R")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("com_bradley.R")
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
lambda
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
View(HIT3)
newnew
HIT3
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
lambda
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
newnew
colnames(newnew)<-c("Choose","DocId","Lambda")
newnew
HIT3
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
colnames(lambda)<-c("DocId","Lambda")
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
DocId
updateLambdax2
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
#this function will b in R but call on a C function; see line 253
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5012")
toPassToC
library(plyr)
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
>>>>>>> 6e6d8404c523b33267c7316f17d73413caab0212
dataReorganizer<-function(x){ #this is a function that does line 235-241 for a specified DocID
lambdax<-lambda[paste0(x),"Lambda"]
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
#
newData<-cbind(thisChoos, thisLambda)
newData
}
<<<<<<< HEAD
dataReorganizer(5011) #organizes the DF for x, the DocID
lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
dat5011<-dataReorganizer(5011) #organizes the DF for x, the DocID
colnames(dat5011$V2)<-"Lambda"
head(dat5011)
colnames(dat5011$V2)
colnames(dat5011[,3])<-"Lambda"
colnames(dat5011)<-c('thisChoos', 'DocId', "Lambda")
head(dat5011)
#this needs to be in rcpp
#updates one docId, which corresponds with lambdax
updateLambdax<-function(newData, lambdax, a=1, b=1){ #lambdax is the lmabda of DocIDx (5011); DataFrame, double, int, int
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
return(numerator/denominator)
}
updateLambdax(newData=newData, lambdax=lambdax)
=======
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
toPassToC
names(toPassToC)<-unique(lambda$DocId)
toPassToC
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
toPassToC
lambda
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
toPassToC
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5012")
lambda$DocId
lapply(unique(lambda$DocId), dataReorganizer)
HIT2
lambdaLoop2(hits=HIT2,DocIds = DocId,Hit3 = newnew, extractLambda=lambda$Lambda)
lambdaLoop2(hits=HIT2,DocIds = DocId,Hit3 = HIT3, extractLambda=lambda$Lambda)
HIT3
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5012")
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="4969")
toPassToC
>>>>>>> 6e6d8404c523b33267c7316f17d73413caab0212
