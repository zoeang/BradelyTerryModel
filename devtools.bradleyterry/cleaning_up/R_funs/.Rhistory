#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
#this should stay in R; rename the function and objects
dataReorganizer<-function(x){ #this is a function that does line 235-241 for a specified DocID
lambdax<-lambda[paste0(x),"Lambda"]
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
#
newData<-cbind(thisChoos, thisLambda)
newData
}
dataReorganizer(4969) #organizes the DF for x, the DocID
#this needs to be in rcpp
#updates one docId, which corresponds with lambdax
updateLambdax<-function(newData, lambdax, a=1, b=1){ #lambdax is the lmabda of DocIDx (5011); DataFrame, double, int, int
numerator<-(a-1)+sum(newData$thisChoos)
denominator<-(b+sum(1/(lambdax+newData$Lambda)))
return(numerator/denominator)
}
updateLambdax(newData=newData, lambdax=lambdax)
#make this function (toPasstoC) in rcpp
library(plyr)
#toPassToC<-
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5012")
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
#this function will b in R but call on a C function; see line 253
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="4969")
lambdax<-lambda[lambda, "Lambda"]
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
names(toPassToC)
#this function will b in R but call on a C function; see line 253
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="4969")
toPassToC
## Update all Lambdas
ob<-sapply(paste0(unique(lambda$DocId)), FUN=updateLambdax2, lambda=lambda, allData= toPassToC )
class(ob)
updateLambdax(newData=newData, lambdax=lambdax)
plot(log(recovered$Lambda),comparison$Lambda)
ob
HIT3<- merge(HIT2, lambda, by="DocIDj")
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3<- merge(HIT2, lambda, by="DocIDj")
getlambda(lambda, DocId) #taking lambda for matching DocId
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
#this is same as "bradleyterry" in R.
posteriorlambda(HIT3, lambda$Lambda[1], 1,1)
HIT3
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
lambda<- as.data.frame(cbind(DocId, runif(50)))
lambda
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
DocId<-sort(unique(HIT$document_id), decreasing=F)
HIT2<-datatransform(HIT)
HIT2
colnames(lambda)<-c("DocIDj", "Lambda")
lambda
HIT3<- merge(HIT2, lambda, by="DocIDj")
HIT3
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
lambda<- as.data.frame(cbind(DocId, runif(50))) #lambda values are random
lambda
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
lambda2<- as.data.frame(cbind(DocId, runif(50))) #lambda values are random
lambda2<- as.data.frame(cbind(DocId, runif(50))) #lambda values are random
lambda2
DocId<-sort(unique(HIT$document_id), decreasing=F)
HIT2<-datatransform(HIT)
#lambda2<- as.data.frame(cbind(DocId, runif(50))) #lambda values are random
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3<- merge(HIT2, lambda, by="DocIDj")
HIT3
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3<- merge(HIT2, lambda, by="DocIDj")
HIT3
lambda
HIT3
View(HIT3)
HIT3$DocIDj=="4969"
HIT3$DocIDj["4969"]
HIT3$DocIDj[1]
HIT3$[1]
HIT3$Lambda[1]
lambda
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
source("com_bradley.R")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("com_bradley.R")
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
colnames(lambda)<-c("DocIDj", "Lambda")
lambda
HIT3<- merge(HIT2, lambda, by="DocIDj")
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
lambda$Lambda[1]
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
HIT3
lambda
lambda2<-colname(lambda)<-c("DocId","Lambda")
lambda2<-colnames(lambda)<-c("DocId","Lambda")
bradleyterry(a=1,b=1,id=4969,lambda2,HIT2)
lambda2
lambda
colnames(lambda)<-c("DocId","Lambda")
lambda
bradleyterry(a=1,b=1,id=4969,lambda2,HIT2)
colnames(lambda)<-c("DocId","Lambda")
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3
colnames(lambda)<-c("DocId","Lambda")
x<-4969  #if you want to change doc id (for instance, 4969), just change all 5011 to 4969.
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
rownames(lambda)<-lambda$DocId #rename each row the the DocID; the row names are strings/ characters
lambdax<-lambda[paste0(x),"Lambda"]
lambdax
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
thisLambda
newData
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
dataReorganizer<-function(x){ #this is a function that does line 235-241 for a specified DocID
lambdax<-lambda[paste0(x),"Lambda"]
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
#
newData<-cbind(thisChoos, thisLambda)
newData
}
dataReorganizer(4969) #organizes the DF for x, the DocID
dataReorganizer(4969)
new<-dataReorganizer(4969)
posteriorlambda(new, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
View(new)
View(HIT3)
View(new)
Rcpp::sourceCpp("post_lambda.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("post_lambda.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("post_lambda.cpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("post_lambda.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("post_lambda.cpp")
getlambda(lambda, DocId) #taking lambda for matching DocId
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
Rcpp::sourceCpp("post_lambda.cpp")
Rcpp::sourceCpp("post_lambda.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
new<-dataReorganizer(4969)
new
posteriorlambda(new, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
new<-dataReorganizer(4969)
posteriorlambda(new, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
new
dataReorganizer(4969)
newData
posteriorlambda(newData, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("datatransform.R") #use only once
HIT2<-datatransform(HIT)
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
Rcpp::sourceCpp("post_lambda.cpp")
getlambda(lambda, DocId) #taking lambda for matching DocId
colnames(lambda)<-c("DocIDj", "Lambda")
getlambda(lambda, DocId) #taking lambda for matching DocId
HIT3<-subset(HIT3, HIT3$DocIDj=="4969") #this may help ? -LIM
posteriorlambda(newData, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
x<-4969  #if you want to change doc id (for instance, 4969), just change all 5011 to 4969.
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
rownames(lambda)<-lambda$DocId #rename each row the the DocID; the row names are strings/ characters
lambdax<-lambda[paste0(x),"Lambda"] #get the lambda value of x=5011
#same thing as ^ doc.x.lambda<-lambda[paste0(x),"Lambda"] # the prior lambda value of doc x
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
x<-4969  #if you want to change doc id (for instance, 4969), just change all 5011 to 4969.
rownames(lambda)<-lambda$DocIdj
lambdax<-lambda[paste0(x),"Lambda"]
rownames(lambda)<-lambda$DocIdj #rename each row the the DocID; the row names are strings/ characters
lambdax<-lambda[paste0(x),"Lambda"] #get the lambda value of x=5011
#same thing as ^ doc.x.lambda<-lambda[paste0(x),"Lambda"] # the prior lambda value of doc x
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
dat<-read.csv("C:/Users/dell/Documents/GitHub/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
x<-4969  #if you want to change doc id (for instance, 4969), just change all 5011 to 4969.
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
rownames(lambda)<-lambda$DocIdj #rename each row the the DocID; the row names are strings/ characters
lambdax<-lambda[paste0(x),"Lambda"] #get the lambda value of x=5011
#same thing as ^ doc.x.lambda<-lambda[paste0(x),"Lambda"] # the prior lambda value of doc x
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
rownames(lambda)<-lambda$DocId
lambdax<-lambda[paste0(x),"Lambda"]
rownames(lambda)<-lambda$DocId #rename each row the the DocID; the row names are strings/ characters
lambdax<-lambda[paste0(x),"Lambda"] #get the lambda value of x=5011
#same thing as ^ doc.x.lambda<-lambda[paste0(x),"Lambda"] # the prior lambda value of doc x
lambdax
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to Doc 5011
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
#^why do some of the row names have decimals?
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
class(newData)
posteriorlambda(newData, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
lambda$Lambda[1]
newData
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3<- merge(HIT2, lambda, by="DocIDj")
HIT3
View(newData)
lambda$Lambda[1]
newData
newData[1]
thisChoos
thisLambda
lambdax
rownames(lambda)<-lambda$DocId
thisChoos
newData
c(newData$thisChoos,newData$DocId,newData$Lambda)
cbind(newData$thisChoos,newData$DocId,newData$Lambda)
colnames(newnew)<-c("thisChoos","DocId","Lambda")
newnew<-cbind(newData$thisChoos,newData$DocId,newData$Lambda)
colnames(newnew)<-c("thisChoos","DocId","Lambda")
newnew
posteriorlambda(newData, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
View(HIT3)
newnew<-as.data.frame(cbind(newData$thisChoos,newData$DocId,newData$Lambda))
colnames(newnew)<-c("thisChoos","DocId","Lambda")
posteriorlambda(newData, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
newnew
newData
Rcpp::sourceCpp("posteriorlambda.cpp")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
View(HIT3)
View(HIT2)
View(lambda)
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
source("com_bradley.R")
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("com_bradley.R")
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
lambda
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
View(HIT3)
newnew
HIT3
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
lambda
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
newnew
colnames(newnew)<-c("Choose","DocId","Lambda")
newnew
HIT3
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
posteriorlambda(newnew, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
colnames(lambda)<-c("DocId","Lambda")
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
DocId
updateLambdax2
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
#this function will b in R but call on a C function; see line 253
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5012")
toPassToC
library(plyr)
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
dataReorganizer<-function(x){ #this is a function that does line 235-241 for a specified DocID
lambdax<-lambda[paste0(x),"Lambda"]
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"]
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),]
#
newData<-cbind(thisChoos, thisLambda)
newData
}
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
toPassToC
names(toPassToC)<-unique(lambda$DocId)
toPassToC
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
toPassToC
lambda
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
names(toPassToC)<-unique(lambda$DocId)
toPassToC
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5012")
lambda$DocId
lapply(unique(lambda$DocId), dataReorganizer)
HIT2
lambdaLoop2(hits=HIT2,DocIds = DocId,Hit3 = newnew, extractLambda=lambda$Lambda)
lambdaLoop2(hits=HIT2,DocIds = DocId,Hit3 = HIT3, extractLambda=lambda$Lambda)
HIT3
toPassToC<-  lapply(unique(lambda$DocId), dataReorganizer)#makes a list of DFs where each DF is the updated lambdas for all comparisons of doc dyads
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="5012")
updateLambdax2<-function(allData, lambda, thisName, a=1, b=1){ #allData is an rcpp function; thisName is a string of the DocID
lambdax<-lambda[thisName, "Lambda"]
newData<-allData[[thisName]]
### R will nwo call some c function right here
## Wil datke in lambax and newData and b and a and return numerator/denomintor
numerator<-(a-1)+sum(newData$thisChoos) ## this works in c
denominator<-(b+sum(1/(lambdax+newData$Lambda))) ## this works in c
return(numerator/denominator) # do the division here in c 2
}
updateLambdax2(allData=toPassToC, lambda=lambda, thisName="4969")
toPassToC
