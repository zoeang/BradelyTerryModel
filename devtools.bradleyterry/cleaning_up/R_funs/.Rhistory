###### In R only. Old code ########
###################################
#Data Generation===============================================================
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd('C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs')
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
source("com_bradley.R")
#Give updated lambda: just one lambda for one id
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
#this is same as "bradleyterry" in R.
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3<- merge(HIT2, lambda, by="DocIDj")
#this is same as "bradleyterry" in R.
posteriorlambda(HIT3, lambda$Lambda[1], 1,1) #one updated lambda for id 4969
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
#this is same as "bradleyterry.multid" in R.
lambdaLoop2(hits=HIT2,DocIds = DocId,Hit3 = HIT3, extractLambda=lambda$Lambda)
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
#this is same as "bradleyterry.multid" in R.
lambdaLoop2(hits=HIT2,DocIds = DocId,Hit3 = HIT3, extractLambda=lambda$Lambda)
rm(list=ls())
###### In R only. Old code ########
###################################
#Data Generation===============================================================
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd('C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs')
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
source("com_bradley.R")
#Rcpp application
#Prepare the data: With RCPP we will use HIT3 data for a while
DocId<-sort(unique(HIT$document_id), decreasing=F)
HIT2<-datatransform(HIT)
lambda<- as.data.frame(cbind(DocId, runif(50))) #lambda values are random
colnames(lambda)<-c("DocIDj", "Lambda")
HIT3<- merge(HIT2, lambda, by="DocIDj")
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
#this is same as "bradleyterry.multid" in R.
lambdaLoop2(hits=HIT2,DocIds = DocId,Hit3 = HIT3, extractLambda=lambda$Lambda)
#we need to take out the first value becasue of indexing problem.
out<-lambdaLoop2(hits=HIT2,DocIds = DocId,Hit3 = HIT3, extractLambda=lambda$Lambda)
out
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
#this is same as "bradleyterry.multid" in R.
lambdaLoop2(hits=HIT2,DocIds = DocId,Hit3 = HIT3, extractLambda=lambda$Lambda)
rm(list=ls())
library(csp)
class(csp)
###### In R only. Old code ########
###################################
#Data Generation===============================================================
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd('C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs')
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
#DocId<-sort(unique(HIT$document_id), decreasing=F)
#HIT2<-datatransform(HIT)
#lambda2<- as.data.frame(cbind(DocId, runif(50))) #lambda values are random
colnames(lambda)<-c("DocIDj", "Lambda")
H
HIT3<- merge(HIT2, lambda, by="DocIDj")
head(HIT2)
head(HIT3)
#Here is our old function which is a baseline
#this is the old slower function
setwd("C:/Users/dell/Documents/GitHub/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("com_bradley.R")
#Give updated lambda: just one lambda for one id
bradleyterry(a=1,b=1,id=4969,lambda,HIT2)
#Give updated lambdas: just multi lambda for multi ids
DocId
bradleyterry.multid(a=1,b=1, id=DocId, lambda, HIT2)
#tolerance test #
iterative.bt.tol(a=1,b=1,DocId,lambda,dat=HIT2,iterations=100)
#Give updated lambdas: just multi lambda for multi ids
DocId
rm(list=ls()0)
rm(list=ls())
library(csp)
library(dplyr)
library(tidyr)
select(csp, c('elect_year',
'limit_type'))
df <- subset(csp, variable == c("elect_year", "limit_type"))
rm(list=ls())
###### In R only. Old code ########
###################################
#Data Generation===============================================================
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd('C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs')
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
library(plyr)
head(HIT2)
HIT2$Lambda <- lambda$Lambda[match(HIT2$DocIDj, lambda$DocId)]
head(HIT2)
HIT2$Lambda <- lambda$Lambda[match(HIT2$DocIDj, lambda$DocId)]
head(HIT2)
lambda$Lambda[match(HIT2$DocIDj, lambda$DocId)]
head(lambda)
head(HIT2)
lambda<-c("DocIdj","Lambda")
merge(HIT2, lambda, by="DocIDj")
lambda<-c("DocIDj","Lambda")
merge(HIT2, lambda, by="DocIDj")
head(lambda)
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
colnames(lambda)<-c("DocIDj","Lambda")
merge(HIT2, lambda, by="DocIDj")
HIT2.1<-merge(HIT2, lambda, by="DocIDj")
head(HIT2.1)
#colnames(lambda)<-c("DocIDj","Lambda")
#HIT2.1<-merge(HIT2, lambda, by="DocIDj")
head(HIT2.1,15)
#colnames(lambda)<-c("DocIDj","Lambda")
#HIT2.1<-merge(HIT2, lambda, by="DocIDj")
tail(HIT2.1,15)
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
lambda$DocId
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
lambda$DocId
rownames(lambda)
rownames(lambda)<-lambda$DocId
rownames(lambda)
# this is the lambda I'm updating right now
x<-4969  #if you want to change doc id (for instance, 4969), just change all 5011 to 4969.
lambdax<-lambda[paste0(x),"Lambda"]
lambdax
lambda
colnames(lambda)<-c("DocId", 'Lambda')
lambdax<-lambda[paste0(x),"Lambda"]
lambdax
HIT2$DocIDi==x
thisChoos<-HIT2[which(HIT2$DocIDi==x),"Choose"] #make a vector of "choose" of the DocIDis compared to doc x
thisChoos
which(HIT2$DocIDi==x)
(HIT2[which(HIT2$DocIDi==x)
]
)
HIT2$DocIDi==x
which(HIT2$DocIDi==x),"DocIDj"])
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
thisLambda
thisLambda<-lambda[paste0(HIT2[which(HIT2$DocIDi==x),"DocIDj"]),] #make a df of DocIds, lambda from HIT2; similar to lambdax
#^why do some of the row names have decimals? Thee can only be unique row names; multiple instances of docID
newData<-cbind(thisChoos, thisLambda)# df of choose, DocId, and  lambda from HIT2
newData
head(newData)
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/R_funs")
Rcpp::sourceCpp("tolTest.cpp")
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("tolTest.R")
#Rccp tolerance test.
tolTest(HIT2, lambda, DocId,1000 )
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
#Below will be the same as above
colnames(lambda)<-c("DocIDj","Lambda")
tolTest(HIT2, lambda, DocId,200 )
rm(list=ls())
###### In R only. Old code ########
###################################
#Data Generation===============================================================
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd('C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs')
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
rm(list=ls())
###### In R only. Old code ########
###################################
#Data Generation===============================================================
dat<-read.csv("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/CombinedOutputExperiment2.csv", header = T)
HIT<-dat[,3:5]
setwd('C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs')
source("datatransform.R") #use only once
#We will use HIT2 for R only functions in most cases
HIT2<-datatransform(HIT)
#For testing our old R function
set.seed(42)
DocId<-unique(HIT$document_id)
DocId<-sort(DocId, decreasing = F)
lambda<-cbind(DocId,runif(50))
lambda<-as.data.frame(lambda)
lambda$Lambda[match(HIT2$DocIDj, lambda$DocId)]
#colnames(lambda)<-c("DocIDj", "Lambda")
head(lambda)
colnames(lambda)<-c("DocIDj", "Lambda")
library(plyr)
#Why are we doing this?
HIT2$Lambda <- lambda$Lambda[match(HIT2$DocIDj, lambda$DocId)]
HIT2$Lambda
lambda$DocId
View(lambda)
View(lambda)
Lambda<-runif(50)
lambda<-cbind(DocId,Lambda)
lambda<-as.data.frame(lambda)
lambda
match(HIT2$DocIDj, lambda$DocId)
lambda$Lambda
#Why are we doing this?
HIT2$Lambda <- lambda$Lambda[match(HIT2$DocIDj, lambda$DocId)]
HIT2
tolTest(HIT2, lambda, DocId,200 )
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("tolTest.R")
tolTest(HIT2, lambda, DocId,200 )
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("tolTest.R")
tolTest(HIT2, lambda, DocId,200 )
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/Rcpp")
Rcpp::sourceCpp("posteriorlambda.cpp")
Rcpp::sourceCpp("getlambda.cpp")
#Rcpp::sourceCpp("subsetLambdasDF.cpp")
Rcpp::sourceCpp("lambdaLoop2.cpp")
setwd("C:/Users/zoeja/OneDrive/Documents/Spring2018/R/BradelyTerryModel/devtools.bradleyterry/cleaning_up/R_funs")
source("tolTest.R")
#Rccp tolerance test.
tolTest(HIT2, lambda, DocId,100)
